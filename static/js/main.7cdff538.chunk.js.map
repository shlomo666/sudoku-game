{"version":3,"sources":["lib/board.js","components/ChoiceDialog.js","lib/logic.js","components/BoardElement.jsx","components/MenuElement.jsx","components/SolverElement.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Cell","value","arguments","length","undefined","Object","classCallCheck","this","row","column","block","options","locked","fiber","index","Board","dim","sqrt","Math","pow","rows","Array","fill","map","p","columns","blocks","all","i","j","cell","toConsumableArray","backupState","_this","_this2","priority","range","ignoreInput","backup","filter","forEach","dir","_loop","val","matchVal","priorityIdx","indexOf","some","rollback","_this3","_loop2","_loop3","visibleCells","getVisibleCellsByDifficulty","solvePriority","shuffleArray","solve","size","shuffledIndexes","valsRemoved","push","counter","isSolvable","pop","console","warn","concat","window","currVisible","shuffle","arr","getHints","_ref","every","c","lastValue","_this4","parseInt","repeat","_this5","setFibers","hints","toString","_loop4","n","ordersArr","order","candidates","_this6","keys","_loop5","start","_","idx","floor","random","_ref2","difficultyMap","4","1","2","3","5","9","16","difficulty","ChoiceDialog","props","onChange","react_default","a","createElement","style","display","key","className","onClick","setFibersStrong","board","fibersBefore","reduceFibers1","reduceFibers2","reduceFibers3","swordfish","flat","groupI","where","sourceGroup","sourceIdx","slicedToArray","getCellsToRemoveOptionFrom","fibers","toChunks","reduce","totalFiber","fiberGroups","o","bit","group","marks","isHaving2Bits","isHavingBits","bind","triggeredArr","Set","foundNew","oArrIdx","triggered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","having2Bits","has","add","log","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","isHaving2to3Bits","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","having2to3Bits","k","_console","idxs","bitsToRemove","apply","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","includes","_iterator3","bits","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","hasN","columnsWithOnly2N","Map","get","set","values","removeOptionFromFiber","_iterator5","slice","BoardElement","possibleConstructorReturn","getPrototypeOf","call","state","b","shuffleHard","highlightedCell","highlightedNumber","optionsMode","isEnded","fullCounter","focusedCell","page","error","color","components_ChoiceDialog","setState","l","getOptionsCell","getNumberCell","onExit","showHint","type","maxLength","readOnly","backgroundColor","fontWeight","onFocus","e","highlightLines","highlightNumber","target","setSelectionRange","onBlur","unhighlightLines","Number","changeValueOnBoard","isSolved","objectSpread","optionCellSize","tabIndex","onKeyUp","test","marked","fontSize","width","height","reason","_ref3","_ref4","hint","setTimeout","Component","nextState","defaultValue","onInput","hidden","borderColor","App","components_BoardElement","MenuElement","SolverElement","getPage","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cdff538.chunk.js","sourcesContent":["class Cell {\n    constructor(value = 0) {\n        /** @type {Cell[]} */\n        this.row = [];\n        /** @type {Cell[]} */\n        this.column = [];\n        /** @type {Cell[]} */\n        this.block = [];\n        this.value = value;\n        this.options = [];\n        this.locked = false;\n        this.fiber = 0;\n        this.index = 0;\n    }\n}\n\nclass Board {\n    constructor(dim) {\n        this.dim = dim;\n        const sqrt = this.sqrt = dim ** 0.5;\n        /** @type {Array<Array<Cell>>} */\n        this.rows = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Array<Cell>>} */\n        this.columns = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Array<Cell>>} */\n        this.blocks = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Cell>} */\n        this.all = new Array(dim ** 2).fill(0);\n        for (let i = 0; i < dim; i++) {\n            for (let j = 0; j < dim; j++) {\n                const cell = new Cell();\n\n                this.rows[i][j] = cell;\n                cell.row = this.rows[i];\n\n                this.columns[j][i] = cell;\n                cell.column = this.columns[j];\n\n                this.blocks[i - i % sqrt + (j - j % sqrt) / sqrt][(i % sqrt) * sqrt + j % sqrt] = cell;\n                cell.block = this.blocks[i - i % sqrt + (j - j % sqrt) / sqrt];\n\n                this.all[i * dim + j] = cell;\n\n                cell.options = [...Array(dim)];\n                cell.index = i * dim + j;\n            }\n        }\n    }\n\n    backup() {\n        this.backupState = this.all.map(cell => cell.value);\n    }\n\n    rollback() {\n        this.all.map((cell, i) => cell.value = this.backupState[i]);\n    }\n\n    solve(priority = range(this.dim, 1), ignoreInput) {\n        this.backup();\n        if (!ignoreInput) {\n            this.all.filter(cell => !cell.locked).forEach(cell => cell.value = 0);\n        }\n\n        let i = -1, dir = 1;\n        /** @type {Cell} */\n        let cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let matchVal = cell => cell.value === val;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(matchVal)\n                    ||\n                    cell.row.some(matchVal)\n                    ||\n                    cell.column.some(matchVal)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        if (i === -1) {\n            this.rollback();\n        }\n        return i > -1;\n    }\n\n    isSolvable(priority = range(this.dim, 1)) {\n        this.backup();\n\n        let i = -1, dir = 1;\n        let foundSolution = false;\n\n        /** @type {Cell} */\n        let cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let matchVal = cell => cell.value === val;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(matchVal)\n                    ||\n                    cell.row.some(matchVal)\n                    ||\n                    cell.column.some(matchVal)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        if (i === -1) {\n            this.rollback();\n            return false;\n        }\n\n        dir = -1;\n        foundSolution = true;\n\n        cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let matchVal = cell => cell.value === val;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(matchVal)\n                    ||\n                    cell.row.some(matchVal)\n                    ||\n                    cell.column.some(matchVal)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        this.rollback();\n        return i === -1 && foundSolution;\n    }\n\n    shuffle_test(difficulty = 5) {\n        const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n\n        this.all.forEach(cell => { cell.locked = false; cell.value = 0; });\n        const solvePriority = shuffleArray(range(this.dim, 1));\n        this.solve(solvePriority, true);\n\n        const size = this.dim ** 2;\n        const shuffledIndexes = shuffleArray(range(size));\n        this.all.forEach(cell => cell.locked = true);\n\n        let i;\n        const valsRemoved = [];\n        for (i = size - 1; i >= visibleCells; i--) {\n            const cell = this.all[shuffledIndexes[i]];\n            valsRemoved.push(cell.value);\n            cell.locked = false;\n            cell.value = 0;\n        }\n        i++;\n        let counter = 0;\n        while (!this.isSolvable(solvePriority)) {\n            this.all[shuffledIndexes[i]].value = valsRemoved.pop();\n            counter++;\n        }\n\n        if (counter > 0) {\n            console.warn(`Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${visibleCells - counter} visible cells`);\n            window.currVisible = visibleCells - counter;\n        }\n    }\n\n    shuffleHard() {\n        if(this.dim !== 9) {\n            return this.shuffle();\n        }\n\n        do {\n            this.shuffle();\n\n            let arr;\n            do {\n                arr = this.getHints();\n                arr.forEach(({ cell, value }) => cell.value = value);\n            } while (arr.length > 0);\n\n        } while (this.all.every(c => c.value > 0));\n\n        // TESTING EASIER WHEN COMMENTED OUT\n        this.all.filter(c => !c.locked).forEach(c => c.value = 0); \n    }\n\n    shuffle(difficulty = 5) {\n        // const startT = performance.now();\n\n        const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n\n        this.all.forEach(cell => { cell.locked = false; cell.value = 0; });\n        const priority = shuffleArray(range(this.dim, 1));\n        this.solve(priority, true);\n        this.all.forEach(cell => cell.locked = true);\n\n        const size = this.dim ** 2;\n        const shuffledIndexes = shuffleArray(range(size));\n        let currVisible = size;\n        let i = 0;\n        let lastValue, cell, isSolvable;\n        do {\n\n            do {\n                cell = this.all[shuffledIndexes[i]];\n                lastValue = cell.value;\n                cell.value = 0;\n                cell.locked = false;\n                i++;\n                currVisible--;\n                isSolvable = this.isSolvable(priority);\n            } while (isSolvable && currVisible > visibleCells && i < size);\n\n            if (!isSolvable) {\n                currVisible++;\n                cell.value = lastValue;\n                cell.locked = true;\n            }\n        } while (currVisible > visibleCells && i < size);\n\n        if (currVisible > visibleCells) {\n            console.warn(`Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${currVisible} visible cells`);\n            window.currVisible = currVisible;\n        }\n\n        // console.log('shuffle took:', performance.now() - startT);\n    }\n\n\n    setFibers() {\n        this.all.filter(c => !c.value).forEach(c => {\n            let fiber = parseInt('1'.repeat(this.dim), 2);\n            c.row.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n            c.column.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n            c.block.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n            c.fiber = fiber;\n        })\n    }\n\n    getHints() {\n        this.setFibers();\n\n        const hints = this.all\n            .filter(c => !c.value && !(c.fiber & (c.fiber - 1)))\n            .map(c => ({ cell: c, value: c.fiber.toString(2).length }));\n\n        for (let n = 1; n <= this.dim; n++) {\n            [\n                this.rows,\n                this.columns,\n                this.blocks\n            ].forEach(ordersArr => {\n                ordersArr.forEach(order => {\n                    const candidates = order.filter(c => !c.value && (c.fiber & (1 << (n - 1))));\n                    if (candidates.length === 1) {\n                        hints.push({\n                            cell: candidates[0],\n                            value: n\n                        });\n                    }\n                });\n            });\n        }\n\n        return hints;\n    }\n\n    getHints_indexes() {\n        const hints = [...this.all.keys()]\n            .filter(i => !this.all[i].value && !(this.all[i].fiber & (this.all[i].fiber - 1)))\n            .map(i => ({ index: i, value: this.all[i].fiber.toString(2).length }));\n\n        for (let n = 1; n <= this.dim; n++) {\n            [\n                this.rows,\n                this.columns,\n                this.blocks\n            ].forEach(ordersArr => {\n                ordersArr.forEach(order => {\n                    const candidates = order.filter(c => !c.value && (c.fiber & (1 << (n - 1))));\n                    if (candidates.length === 1) {\n                        hints.push({\n                            index: this.all.indexOf(candidates[0]),\n                            value: n\n                        });\n                    }\n                });\n            });\n        }\n\n        return hints;\n    }\n}\n\nfunction range(n, start = 0) {\n    return Array(n).fill().map((_, i) => i + start);\n}\n\nfunction shuffleArray(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        const idx = Math.floor(Math.random() * arr.length - i) + i;\n        [arr[i], arr[idx]] = [arr[idx], arr[i]];\n    }\n    return arr;\n}\n\nconst difficultyMap = {\n    4: {\n        1: 8,\n        2: 7,\n        3: 6,\n        4: 5,\n        5: 4\n    },\n    9: {\n        1: 40,\n        2: 35,\n        3: 30,\n        4: 25,\n        5: 22\n    },\n    16: {\n        1: 180,\n        2: 160,\n        3: 140,\n        4: 120,\n        5: 115//103\n    }\n}\nfunction getVisibleCellsByDifficulty(difficulty, dim) {\n    return difficultyMap[dim][difficulty];\n}\n\nBoard.Cell = Cell;\n\nexport default Board;","import React from 'react';\nimport '../App.css';\n\nimport Board from '../lib/board';\n\n/** @param {{ dim: number, cell?: Board.Cell, onChange: () => void }} props */\nfunction ChoiceDialog(props) {\n    let { dim, cell, onChange } = props;\n\n    return <div style={{ display: 'flex' }}>\n        {Array(dim).fill().map((_, i) => i).map(i => {\n            return <button\n                key={i}\n                className={\"Options-Dialog-Button\" + (cell && cell.options[i] ? '' : ' Options-Dialog-Button-Pressed')}\n                onClick={() => {\n                    if(cell) {\n                        cell.options[i] = !cell.options[i];\n                        onChange();\n                    }\n                }}>{i + 1}</button>;\n        })}\n    </div>;\n}\n\nexport default ChoiceDialog;","import Board from './board';\n\nexport function range(n) {\n    return [...Array(n).keys()];\n}\n\n/** @param {Board} board */\nexport function isSolved(board) {\n    return (\n        board.rows.every(row => new Set(row.map(cell => cell.value)).size === board.dim)\n        &&\n        board.columns.every(column => new Set(column.map(cell => cell.value)).size === board.dim)\n        &&\n        board.blocks.every(block => new Set(block.map(cell => cell.value)).size === board.dim)\n    );\n}\n\n/** @param {Board} board */\nexport function setFibers(board) {\n    board.all.forEach(c => {\n        if (c.value) {\n            c.fiber = 0;\n            return;\n        }\n\n        let fiber = (1 << board.dim) - 1;\n        c.row.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.column.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.block.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.fiber = fiber;\n    })\n}\n\n/** @param {Board} board */\nexport function setFibersStrong(board) {\n    setFibers(board);\n\n    let fibersBefore;\n\n    do {\n        fibersBefore = board.all.map(c => c.fiber);\n        reduceFibers1(board);\n        reduceFibers2(board);\n        reduceFibers3(board);\n        swordfish(board);\n    } while (board.all.some((c, i) => c.fiber !== fibersBefore[i]));\n}\n\n/** @param {Board} board */\nexport function reduceFibers1(board) {\n    const { sqrt, dim } = board;\n\n    [\n        [board.rows.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].block.filter((_, idx) => Math.floor(idx / sqrt) !== groupI % sqrt)],\n        [board.columns.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].block.filter((cell) => cell.index % dim !== groupI % dim)],\n        [board.blocks.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].row.filter((_, idx) => Math.floor(idx / sqrt) !== groupI % sqrt)],\n        [board.blocks.map(block => block.map((c, i, arr) => arr[Math.floor(i / sqrt) + (i % sqrt) * sqrt])).flat(), (groupI, where, sourceGroup) => board.blocks[groupI][where].column.filter((cell, idx) => Math.floor(idx / sqrt) !== Math.floor(groupI / sqrt))]\n    ].forEach(([sourceGroup, getCellsToRemoveOptionFrom], sourceIdx) => {\n        const fibers = toChunks(sourceGroup, sqrt).map(order => order.filter(c => !c.value).reduce((totalFiber, c) => totalFiber | c.fiber, 0));\n        const fiberGroups = toChunks(fibers, sqrt);\n\n        range(dim).map(o => 1 << o).forEach(bit => {\n            fiberGroups.forEach((group, i) => {\n                const marks = group.map(fiber => !!(bit & fiber));\n                if (marks.filter(p => p).length === 1) {\n                    const where = marks.indexOf(true);\n                    const cellsToRemoveOptionFrom = getCellsToRemoveOptionFrom(i, where, sourceGroup);\n                    cellsToRemoveOptionFrom.forEach(cell => cell.fiber = cell.fiber & ~bit);\n                }\n            });\n        });\n    });\n}\n\n/** @param {Board} board */\nexport function reduceFibers2(board) {\n    const isHaving2Bits = isHavingBits.bind(null, 2);\n\n    const ordersArr = [board.rows, board.columns, board.blocks];\n    const triggeredArr = [new Set(), new Set(), new Set()];\n\n    let foundNew = false;\n    do {\n        foundNew = false;\n        for (let oArrIdx = 0; oArrIdx < ordersArr.length; oArrIdx++) {\n            const triggered = triggeredArr[oArrIdx];\n\n            for (const order of ordersArr[oArrIdx]) {\n                const having2Bits = order.filter(isHaving2Bits);\n                for (let i = 0; i < having2Bits.length; i++) {\n                    if (triggered.has(having2Bits[i].index)) continue;\n\n                    const fiber = having2Bits[i].fiber;\n                    for (let j = i + 1; j < having2Bits.length; j++) {\n\n                        if (fiber === having2Bits[j].fiber) {\n                            triggered.add(having2Bits[i].index).add(having2Bits[j].index); // found their match - can't be used again in the orderSet\n                            foundNew = true;\n                            console.log('reduceFibers2', having2Bits[i].index, having2Bits[j].index);\n                            for (const cell of order) {\n                                if (cell.fiber && (cell.fiber !== fiber)) {\n                                    cell.fiber = cell.fiber & ~(fiber);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } while (foundNew);\n}\n\n/** @param {Board} board */\nexport function reduceFibers3(board) {\n    const isHaving2to3Bits = (cell) => isHavingBits(2, cell) || isHavingBits(3, cell);\n\n    const ordersArr = [board.rows, board.columns, board.blocks];\n    const triggeredArr = [new Set(), new Set(), new Set()];\n\n    let foundNew = false;\n    do {\n        foundNew = false;\n        for (let oArrIdx = 0; oArrIdx < ordersArr.length; oArrIdx++) {\n            const triggered = triggeredArr[oArrIdx];\n\n            for (const order of ordersArr[oArrIdx]) {\n                const having2to3Bits = order.filter(isHaving2to3Bits);\n                for (let i = 0; i < having2to3Bits.length; i++) {\n                    if (triggered.has(having2to3Bits[i].index)) continue;\n                    for (let j = i + 1; j < having2to3Bits.length; j++) {\n                        if (triggered.has(having2to3Bits[j].index)) continue;\n                        for (let k = j + 1; k < having2to3Bits.length; k++) {\n                            if (triggered.has(having2to3Bits[k].index)) continue;\n                            \n                            const fiber = having2to3Bits[i].fiber | having2to3Bits[j].fiber | having2to3Bits[k].fiber;\n                            \n                            if (isHaving2to3Bits({fiber})) {\n                                const idxs = [i, j, k].map(idx => having2to3Bits[idx].index);\n                                idxs.forEach(triggered.add.bind(triggered)); // found their match - can't be used again in the orderSet\n                                const bitsToRemove = fiber;\n                                console.log('reduceFibers3', ...idxs);\n                                for (const cell of order) {\n                                    if (cell.fiber && !idxs.includes(cell.index)) {\n                                        cell.fiber = cell.fiber & ~(bitsToRemove);\n                                    }\n                                }\n\n                                foundNew = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } while (foundNew);\n}\n\nexport function isHavingBits(bits, cell) {\n    let counter = 0;\n    let fiber = cell.fiber;\n    do {\n        counter += fiber & 1;\n    } while (counter <= bits && (fiber = fiber >> 1));\n\n    return counter === bits;\n}\n\n/** @param {Board} board */\nexport function getHints(board) {\n    const hints = [...board.all.keys()]\n        .filter(i => !board.all[i].value && !(board.all[i].fiber & (board.all[i].fiber - 1)))\n        .map(i => ({\n            index: i,\n            value: board.all[i].fiber.toString(2).length,\n            reason: 'The only available option for this cell'\n        }));\n\n    range(board.dim).forEach(o => {\n        const value = o + 1;\n        const bit = 1 << o;\n        [\n            [board.rows, `only candidate for ${value} in row`],\n            [board.columns, `only candidate for ${value} in column`],\n            [board.blocks, `only candidate for ${value} in block`]\n        ].forEach(([ordersArr, reason]) => {\n            ordersArr.forEach(order => {\n                const candidates = order.filter(c => !c.value && (c.fiber & bit));\n                if (candidates.length === 1) {\n                    hints.push({\n                        index: board.all.indexOf(candidates[0]),\n                        value,\n                        reason\n                    });\n                }\n            });\n        });\n    });\n\n    return hints;\n}\n\n/** @param {Board} board */\nexport function swordfish(board) {\n    // https://www.kristanix.com/sudokuepic/sudoku-solving-techniques.php\n    // find columns where number is avaliable only in 2 cells.\n    // if one of their rows is also the same - add to trail\n    // if trail goes back - great.\n    // if not - move on\n\n    for(const n of range(board.dim)) {\n        const hasN = cell => cell.fiber & (1 << (n - 1));\n        /** @type {Board.Cell[]} */\n        const columnsWithOnly2N = board.columns.map(column => column.filter(hasN)).filter(column => column.length === 2).flat();\n        if(columnsWithOnly2N.length >= 4) {\n            const map = new Map();\n            columnsWithOnly2N.forEach(cell => {\n                let row = map.get(cell.row);\n                if(!row) {\n                    row = [];\n                    map.set(cell.row, row);\n                }\n                row.push(cell.index);\n            });\n            const rows = [...map.values()];\n            if(rows.every(row => row.length === 2)) {\n                console.log('swordfish', rows);\n                rows.forEach(row => {\n                    board.all[row[0]].row.filter(c => c.index !== row[0] && c.index !== row[1])\n                    .forEach(c => removeOptionFromFiber(c, n));\n                });\n            }\n        }\n    }\n}\n\nfunction removeOptionFromFiber(cell, n) {\n    cell.fiber = cell.fiber & ~(1 << (n - 1));\n}\n\n/** @type {<T>(arr: T[], size: number) => T[][]} */\nexport function toChunks(arr, size) {\n    return [...Array(arr.length / size).keys()].map(i => arr.slice(i * size, (i + 1) * size));\n}\n","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport ChoiceDialog from './ChoiceDialog';\nimport '../App.css';\nimport { getHints, isSolved, range, setFibersStrong } from '../lib/logic';\n\nclass BoardElement extends Component {\n\n    state = {\n        board: (() => {\n            const b = new Board(this.props.dim);\n            b.shuffleHard();\n            // b.shuffle();\n            b.all.forEach(c => {\n                c.state = { highlightedCell: false, highlightedNumber: false };\n            });\n\n            return b;\n        })(),\n        optionsMode: false\n    }\n\n    /** @param {{ dim: number }} props */\n    constructor(props) {\n        super(props);\n        this.isEnded = false;\n        this.fullCounter = this.state.board.all.filter(cell => cell.value).length;\n\n        this.focusedCell = null;\n        // this.choiceDialog = new ChoiceDialog(() => this.setState(this.state));\n    }\n\n    render() {\n        const board = this.state.board;\n        const sqrt = board.sqrt;\n        /// for testing:\n        window.board = board;\n        ///\n\n        const page = (\n\n            <div className=\"App-header\">\n                <div>\n                    <p style={this.state.error ? {} : { color: '#282c34' }}>{this.state.error || 'something'}</p>\n                </div>\n\n                <div>\n                    <ChoiceDialog dim={board.dim} cell={this.focusedCell} onChange={() => this.setState(this.state)}/>\n                </div>\n\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\">\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    if (!cell.value && cell.options.some(n => n)) {\n                                        return this.getOptionsCell(cell);\n                                    } else {\n                                        return this.getNumberCell(cell);\n                                    }\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-green\" onClick={() => {\n                        if (board.solve()) {\n                            this.setState(this.state);\n                        } else {\n                            this.state.error = 'Cannot be solved!';\n                            this.setState(this.state);\n                        }\n                    }}>Solve</button>\n\n                    <button className=\"Buttons btn-yellow\" onClick={() => {\n                        board.all.filter(c => !c.locked).forEach(c => (c.value = 0, c.options = Array(board.dim).fill()));\n                        board.all.forEach(c => {\n                            c.state = { highlightedCell: false, highlightedNumber: false };\n                        });\n                        this.setState(this.state);\n                    }}>Reset</button>\n\n                    <button className=\"Buttons btn-red\" onClick={() => {\n                        this.props.onExit();\n                    }}>Exit</button>\n                </div>\n\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-blue\" onClick={() => {\n                        this.showHint();\n                    }}>Hint</button>\n\n                    <button className=\"Buttons btn-blue\" onClick={() => {\n                        setFibersStrong(board);\n\n                        board.all.filter(c => c.value === 0).forEach(c => {\n                            c.options = c.options.map((_, i) => !!(c.fiber & (1 << i)));\n                        });\n\n                        this.setState(this.state);\n                    }}>Find All Options</button>\n                </div>\n            </div>\n        );\n\n        delete this.state.error;\n        return page;\n    }\n\n    getNumberCell(cell) {\n        const board = this.state.board;\n\n        return <div className=\"Cell\">\n            <input\n                type=\"text\"\n                maxLength=\"2\"\n                readOnly={this.isEnded || cell.locked}\n                key={cell.index}\n                className=\"Cell\"\n                style={{\n                    backgroundColor: cell.locked ? '#A7A7B4' : (cell.state.highlightedCell ? 'rgba(255,255,255,0.8)' : ''),\n                    color: cell.state.highlightedNumber ? 'blue' : '',\n                    fontWeight: cell.state.highlightedNumber ? 'bolder' : 'bold',\n                }}\n                value={cell.value || ''}\n                onFocus={(e) => {\n                    this.focusedCell = cell.value ? null : cell;\n\n                    highlightLines(cell);\n                    highlightNumber(cell, board);\n                    this.setState(this.state);\n                    if (!cell.locked) {\n                        e.target.setSelectionRange(0, e.target.value.length);\n                    }\n                }}\n                onBlur={() => {\n                    unhighlightLines(cell);\n                    highlightNumber(cell, board);\n                    this.setState(this.state);\n                }}\n                onChange={e => {\n                    const n = Number(e.target.value || 0);\n                    this.changeValueOnBoard(n, cell, board);\n                    this.focusedCell = cell.value ? null : cell;\n                }} />\n        </div>;\n    }\n\n    changeValueOnBoard(n, cell, board) {\n        if (n >= 0 && n <= this.props.dim) {\n            if (!!cell.value !== !!n) {\n                this.fullCounter += !!n ? 1 : -1;\n                if (this.fullCounter === board.dim ** 2) {\n                    if (isSolved(board)) {\n                        this.setState({ ...this.state, error: 'You Won!' });\n                        this.isEnded = true;\n                    }\n                    else {\n                        this.setState({ ...this.state, error: 'Wrong!' });\n                        this.isEnded = true;\n                    }\n                }\n            }\n            cell.value = n;\n            this.setState(this.state);\n        }\n        highlightNumber(cell, board);\n    }\n\n    /** @param {Board.Cell} cell */\n    getOptionsCell(cell) {\n        const board = this.state.board;\n        const optionCellSize = Math.floor(30 / board.sqrt);\n\n        return <div className=\"Cell\">\n            <div\n                className=\"Cell options-container\"\n                key={cell.index}\n                tabIndex=\"0\"\n                readOnly={this.isEnded}\n                style={\n                    this.focusedCell === cell ?\n                        { color: 'blue', backgroundColor: 'beige' }\n                        :\n                        (\n                            cell.state.highlightedCell ?\n                                { backgroundColor: 'rgba(255,255,255,0.8)' }\n                                :\n                                {}\n                        )\n                }\n\n                onFocus={(e) => {\n                    this.focusedCell = cell;\n\n                    highlightLines(cell);\n                    highlightNumber(cell, board);\n                    this.setState(this.state);\n                }}\n                onBlur={() => {\n                    unhighlightLines(cell);\n                    highlightNumber(cell, board);\n                    this.setState(this.state);\n                }}\n                onKeyUp={(e) => {\n                    if (/[0-9]/.test(e.key)) {\n                        this.changeValueOnBoard(Number(e.key), cell, board);\n                    }\n                }}\n            >\n                {cell.options.map((marked, i) =>\n                    <div\n                        className=\"options-cell\"\n                        style={{\n                            fontSize: `${board.sqrt === 4 ? optionCellSize / 2 | 0 : optionCellSize - 1}px`,\n                            width: `${optionCellSize}px`,\n                            height: `${optionCellSize}px`\n                        }}>{marked ? i + 1 : ' '}</div>\n                )}\n            </div>\n        </div>\n    }\n\n    showHint() {\n        setFibersStrong(this.state.board);\n        const hints = getHints(this.state.board);\n        console.log(hints);\n        const [hint] = hints;\n        if (hint) {\n            const board = this.state.board;\n            const cell = board.all[hint.index];\n            highlightLines(cell);\n            this.state.error = hint.reason;\n            this.changeValueOnBoard(hint.value, cell, board);\n            setTimeout(() => {\n                unhighlightLines(cell);\n            });\n        }\n\n        return hint;\n    }\n}\n\nexport default BoardElement;\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightNumber(cell, board) {\n    board.all.forEach(c => {\n        c.state.highlightedNumber = (cell.value === c.value);\n    });\n}\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightLines(cell) {\n    cell.row.forEach(p => p.state.highlightedCell = true);\n    cell.column.forEach(p => p.state.highlightedCell = true);\n}\n\n/** @param {Board.Cell} cell */\nfunction unhighlightLines(cell) {\n    cell.row.forEach(p => p.state.highlightedCell = false);\n    cell.column.forEach(p => p.state.highlightedCell = false);\n}\n\n\n","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        dim: this.props.dim\n    }\n\n    render() {\n        const board = new Board(this.state.dim);\n        const sqrt = board.sqrt;\n        return (\n            <div className=\"App-header\" >\n                <button className=\"Buttons\" onClick={() => {\n                    const nextState = { ...this.state, page: 'new game' };\n                    this.setState(nextState);\n                    this.props.onChange(nextState);\n                }}>New Game</button>\n\n                <button className=\"Buttons\" onClick={() => {\n                    const nextState = { ...this.state, page: 'solver' };\n                    this.setState(nextState);\n                    this.props.onChange(nextState);\n                }}>Solver</button>\n\n                <select className=\"Buttons\" defaultValue={this.state.dim} onInput={(val) => {\n                    this.setState({ ...this.state, dim: Number(val.target.value) });\n                }}>\n                    <option value=\"4\">4x4</option>\n                    <option value=\"9\">9x9</option>\n                    <option value=\"16\">16x16</option>\n                </select>\n\n                <div>\n                    {range(sqrt).map(i => <div key={'a' + i} style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div key={'b' + j} className=\"Board-Block\">\n                            {range(sqrt).map(k => <div key={'l' + k} style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    return <input\n                                        key={cell.index}\n                                        type=\"text\"\n                                        maxLength=\"2\"\n                                        readOnly={true}\n                                        className=\"Cell-Mini\"\n                                        value={cell.value || ''}\n                                    />\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        board: new Board(this.props.dim)\n    }\n\n    render() {\n        const board = this.state.board;\n        const sqrt = board.sqrt;\n        /// for testing:\n        window.board = board;\n        ///\n\n        const page = (\n            <div className=\"App-header\">\n                <div>\n                    <p hidden={!this.state.error}>{this.state.error}</p>\n                </div>\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\" >\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    return <input\n                                        type=\"text\"\n                                        maxLength=\"2\"\n                                        className=\"Cell\"\n                                        style={{ backgroundColor: cell.locked ? 'gray' : '', borderColor: cell.locked ? 'gray' : '' }}\n                                        value={cell.value || ''}\n                                        onChange={e => {\n                                            const n = Number(e.target.value || 0);\n                                            if (n >= 0 && n <= this.props.dim) {\n                                                cell.value = n;\n                                                cell.locked = !!cell.value;\n                                                this.setState({ board });\n                                            }\n                                        }}\n                                    />\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-green\" onClick={() => {\n                        if (board.solve()) {\n                            this.setState({ board });\n                        } else {\n                            this.setState({ board, error: 'Cannot be solved!' });\n                        }\n                    }}>Solve</button>\n\n                    <button className=\"Buttons btn-yellow\" onClick={() => {\n                        this.setState({\n                            board: new Board(this.props.dim)\n                        });\n                    }}>Reset</button>\n\n                    <button className=\"Buttons btn-red\" onClick={() => {\n                        this.props.onExit();\n                    }}>Exit</button>\n                </div>\n            </div>\n        );\n\n        delete this.state.error;\n        return page;\n    }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}","import React, { Component } from 'react';\nimport './App.css';\nimport BoardElement from './components/BoardElement';\nimport MenuElement from './components/MenuElement';\nimport SolverElement from './components/SolverElement';\n\nclass App extends Component {\n  state = {\n    dim: 9,\n    page: 'menu'\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {getPage(this.state, state => this.setState(state))}\n        </header>\n      </div>\n    )\n  }\n}\n\nfunction getPage(state, onChange) {\n  switch(state.page) {\n    case 'new game': return <BoardElement dim={state.dim} onExit={() => onChange({ ...state, page: 'menu' })}></BoardElement>\n    case 'menu': return <MenuElement dim={state.dim} onChange={onChange}></MenuElement>\n    case 'solver': return <SolverElement dim={state.dim} onExit={() => onChange({ ...state, page: 'menu' })}></SolverElement>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}