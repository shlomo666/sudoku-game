{"version":3,"sources":["lib/board.js","components/ChoiceDialog.js","lib/logic.js","components/BoardElement.jsx","enums/MenuItems.js","components/MenuElement.jsx","App.jsx","components/SolverElement.jsx","serviceWorker.js","index.js"],"names":["Cell","value","arguments","length","undefined","Object","classCallCheck","this","row","column","block","options","locked","fiber","index","Board","dim","sqrt","Math","pow","rows","Array","fill","map","p","columns","blocks","all","i","j","cell","toConsumableArray","backupState","_this","_this2","priority","range","ignoreInput","backup","filter","forEach","dir","_loop","val","matchVal","priorityIdx","indexOf","some","rollback","_this3","_loop2","_loop3","visibleCells","getVisibleCellsByDifficulty","solvePriority","shuffleArray","solve","size","shuffledIndexes","valsRemoved","push","counter","isSolvable","pop","console","warn","concat","window","currVisible","shuffle","arr","getHints","_ref","every","c","lastValue","_this4","parseInt","repeat","_this5","setFibers","hints","toString","_loop4","n","ordersArr","order","candidates","_this6","keys","_loop5","join","start","_","idx","floor","random","_ref2","difficultyMap","4","1","2","3","5","9","16","difficulty","ChoiceDialog","props","onChange","react_default","a","createElement","style","display","key","className","onClick","setFibersStrong","board","fibersBefore","reduceFibers1","reduceFibers2","reduceFibers3","swordfish","flat","groupI","where","sourceGroup","sourceIdx","slicedToArray","getCellsToRemoveOptionFrom","fibers","toChunks","reduce","totalFiber","fiberGroups","o","bit","group","marks","isHaving2Bits","isHavingBits","bind","triggeredArr","Set","foundNew","oArrIdx","triggered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","having2Bits","has","add","log","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","isHaving2to3Bits","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","having2to3Bits","k","_console","idxs","bitsToRemove","apply","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","includes","_iterator3","bits","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","hasN","columnsWithOnly2N","Map","get","set","values","removeOptionFromFiber","_iterator5","slice","BoardElement","possibleConstructorReturn","getPrototypeOf","call","initialState","state","b","shuffleHard","highlightedCell","highlightedNumber","optionsMode","isEnded","fullCounter","focusedCell","page","error","color","components_ChoiceDialog","setState","l","getOptionsCell","getNumberCell","objectSpread","onExit","showHint","type","maxLength","readOnly","backgroundColor","fontWeight","onFocus","e","highlightLines","highlightNumber","target","setSelectionRange","onBlur","unhighlightLines","Number","changeValueOnBoard","isSolved","optionCellSize","tabIndex","onKeyUp","test","marked","fontSize","width","height","reason","_ref3","_ref4","hint","setTimeout","Component","MenuItems","NEW_GAME","MENU","SOLVER","nextState","defaultValue","onInput","hidden","borderColor","App","document","title","location","pathname","split","_window$location$sear","search","pair","ch","obj","components_BoardElement","regularPath","href","history","pushState","MenuElement","SolverElement","getPage","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ff92d9e.chunk.js","sourcesContent":["class Cell {\n  constructor(value = 0) {\n    /** @type {Cell[]} */\n    this.row = [];\n    /** @type {Cell[]} */\n    this.column = [];\n    /** @type {Cell[]} */\n    this.block = [];\n    this.value = value;\n    this.options = [];\n    this.locked = false;\n    this.fiber = 0;\n    this.index = 0;\n  }\n}\n\nclass Board {\n  constructor(dim) {\n    this.dim = dim;\n    const sqrt = (this.sqrt = dim ** 0.5);\n    /** @type {Array<Array<Cell>>} */\n    this.rows = new Array(dim).fill().map(p => new Array(dim).fill(0));\n    /** @type {Array<Array<Cell>>} */\n    this.columns = new Array(dim).fill().map(p => new Array(dim).fill(0));\n    /** @type {Array<Array<Cell>>} */\n    this.blocks = new Array(dim).fill().map(p => new Array(dim).fill(0));\n    /** @type {Array<Cell>} */\n    this.all = new Array(dim ** 2).fill(0);\n    for (let i = 0; i < dim; i++) {\n      for (let j = 0; j < dim; j++) {\n        const cell = new Cell();\n\n        this.rows[i][j] = cell;\n        cell.row = this.rows[i];\n\n        this.columns[j][i] = cell;\n        cell.column = this.columns[j];\n\n        this.blocks[i - (i % sqrt) + (j - (j % sqrt)) / sqrt][\n          (i % sqrt) * sqrt + (j % sqrt)\n        ] = cell;\n        cell.block = this.blocks[i - (i % sqrt) + (j - (j % sqrt)) / sqrt];\n\n        this.all[i * dim + j] = cell;\n\n        cell.options = [...Array(dim)];\n        cell.index = i * dim + j;\n      }\n    }\n  }\n\n  backup() {\n    this.backupState = this.all.map(cell => cell.value);\n  }\n\n  rollback() {\n    this.all.map((cell, i) => (cell.value = this.backupState[i]));\n  }\n\n  solve(priority = range(this.dim, 1), ignoreInput) {\n    this.backup();\n    if (!ignoreInput) {\n      this.all.filter(cell => !cell.locked).forEach(cell => (cell.value = 0));\n    }\n\n    let i = -1,\n      dir = 1;\n    /** @type {Cell} */\n    let cell = {};\n    while (cell) {\n      i += dir;\n      cell = this.all[i];\n\n      if (!cell || cell.locked) continue;\n\n      let val = cell.value;\n      let matchVal = cell => cell.value === val;\n      let priorityIdx = priority.indexOf(val);\n      do {\n        priorityIdx++;\n        val = priority[priorityIdx];\n      } while (\n        priorityIdx < priority.length &&\n        (cell.block.some(matchVal) ||\n          cell.row.some(matchVal) ||\n          cell.column.some(matchVal))\n      );\n      if (priorityIdx < priority.length) {\n        cell.value = val;\n        dir = 1;\n      } else {\n        cell.value = 0;\n        dir = -1;\n      }\n    }\n\n    if (i === -1) {\n      this.rollback();\n    }\n    return i > -1;\n  }\n\n  isSolvable(priority = range(this.dim, 1)) {\n    this.backup();\n\n    let i = -1,\n      dir = 1;\n    let foundSolution = false;\n\n    /** @type {Cell} */\n    let cell = {};\n    while (cell) {\n      i += dir;\n      cell = this.all[i];\n\n      if (!cell || cell.locked) continue;\n\n      let val = cell.value;\n      let matchVal = cell => cell.value === val;\n      let priorityIdx = priority.indexOf(val);\n      do {\n        priorityIdx++;\n        val = priority[priorityIdx];\n      } while (\n        priorityIdx < priority.length &&\n        (cell.block.some(matchVal) ||\n          cell.row.some(matchVal) ||\n          cell.column.some(matchVal))\n      );\n      if (priorityIdx < priority.length) {\n        cell.value = val;\n        dir = 1;\n      } else {\n        cell.value = 0;\n        dir = -1;\n      }\n    }\n\n    if (i === -1) {\n      this.rollback();\n      return false;\n    }\n\n    dir = -1;\n    foundSolution = true;\n\n    cell = {};\n    while (cell) {\n      i += dir;\n      cell = this.all[i];\n\n      if (!cell || cell.locked) continue;\n\n      let val = cell.value;\n      let matchVal = cell => cell.value === val;\n      let priorityIdx = priority.indexOf(val);\n      do {\n        priorityIdx++;\n        val = priority[priorityIdx];\n      } while (\n        priorityIdx < priority.length &&\n        (cell.block.some(matchVal) ||\n          cell.row.some(matchVal) ||\n          cell.column.some(matchVal))\n      );\n      if (priorityIdx < priority.length) {\n        cell.value = val;\n        dir = 1;\n      } else {\n        cell.value = 0;\n        dir = -1;\n      }\n    }\n\n    this.rollback();\n    return i === -1 && foundSolution;\n  }\n\n  shuffle_test(difficulty = 5) {\n    const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n\n    this.all.forEach(cell => {\n      cell.locked = false;\n      cell.value = 0;\n    });\n    const solvePriority = shuffleArray(range(this.dim, 1));\n    this.solve(solvePriority, true);\n\n    const size = this.dim ** 2;\n    const shuffledIndexes = shuffleArray(range(size));\n    this.all.forEach(cell => (cell.locked = true));\n\n    let i;\n    const valsRemoved = [];\n    for (i = size - 1; i >= visibleCells; i--) {\n      const cell = this.all[shuffledIndexes[i]];\n      valsRemoved.push(cell.value);\n      cell.locked = false;\n      cell.value = 0;\n    }\n    i++;\n    let counter = 0;\n    while (!this.isSolvable(solvePriority)) {\n      this.all[shuffledIndexes[i]].value = valsRemoved.pop();\n      counter++;\n    }\n\n    if (counter > 0) {\n      console.warn(\n        `Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${\n          visibleCells - counter\n        } visible cells`\n      );\n      window.currVisible = visibleCells - counter;\n    }\n  }\n\n  shuffleHard() {\n    if (this.dim !== 9) {\n      return this.shuffle();\n    }\n\n    do {\n      this.shuffle();\n\n      let arr;\n      do {\n        arr = this.getHints();\n        arr.forEach(({ cell, value }) => (cell.value = value));\n      } while (arr.length > 0);\n    } while (this.all.every(c => c.value > 0));\n\n    // TESTING EASIER WHEN COMMENTED OUT\n    this.all.filter(c => !c.locked).forEach(c => (c.value = 0));\n  }\n\n  shuffle(difficulty = 5) {\n    // const startT = performance.now();\n\n    const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n\n    this.all.forEach(cell => {\n      cell.locked = false;\n      cell.value = 0;\n    });\n    const priority = shuffleArray(range(this.dim, 1));\n    this.solve(priority, true);\n    this.all.forEach(cell => (cell.locked = true));\n\n    const size = this.dim ** 2;\n    const shuffledIndexes = shuffleArray(range(size));\n    let currVisible = size;\n    let i = 0;\n    let lastValue, cell, isSolvable;\n    do {\n      do {\n        cell = this.all[shuffledIndexes[i]];\n        lastValue = cell.value;\n        cell.value = 0;\n        cell.locked = false;\n        i++;\n        currVisible--;\n        isSolvable = this.isSolvable(priority);\n      } while (isSolvable && currVisible > visibleCells && i < size);\n\n      if (!isSolvable) {\n        currVisible++;\n        cell.value = lastValue;\n        cell.locked = true;\n      }\n    } while (currVisible > visibleCells && i < size);\n\n    if (currVisible > visibleCells) {\n      console.warn(\n        `Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${currVisible} visible cells`\n      );\n      window.currVisible = currVisible;\n    }\n\n    // console.log('shuffle took:', performance.now() - startT);\n  }\n\n  setFibers() {\n    this.all\n      .filter(c => !c.value)\n      .forEach(c => {\n        let fiber = parseInt('1'.repeat(this.dim), 2);\n        c.row\n          .filter(c => c.value)\n          .forEach(cell => (fiber = fiber & ~(1 << (cell.value - 1))));\n        c.column\n          .filter(c => c.value)\n          .forEach(cell => (fiber = fiber & ~(1 << (cell.value - 1))));\n        c.block\n          .filter(c => c.value)\n          .forEach(cell => (fiber = fiber & ~(1 << (cell.value - 1))));\n        c.fiber = fiber;\n      });\n  }\n\n  getHints() {\n    this.setFibers();\n\n    const hints = this.all\n      .filter(c => !c.value && !(c.fiber & (c.fiber - 1)))\n      .map(c => ({ cell: c, value: c.fiber.toString(2).length }));\n\n    for (let n = 1; n <= this.dim; n++) {\n      [this.rows, this.columns, this.blocks].forEach(ordersArr => {\n        ordersArr.forEach(order => {\n          const candidates = order.filter(\n            c => !c.value && c.fiber & (1 << (n - 1))\n          );\n          if (candidates.length === 1) {\n            hints.push({\n              cell: candidates[0],\n              value: n\n            });\n          }\n        });\n      });\n    }\n\n    return hints;\n  }\n\n  getHints_indexes() {\n    const hints = [...this.all.keys()]\n      .filter(\n        i =>\n          !this.all[i].value && !(this.all[i].fiber & (this.all[i].fiber - 1))\n      )\n      .map(i => ({ index: i, value: this.all[i].fiber.toString(2).length }));\n\n    for (let n = 1; n <= this.dim; n++) {\n      [this.rows, this.columns, this.blocks].forEach(ordersArr => {\n        ordersArr.forEach(order => {\n          const candidates = order.filter(\n            c => !c.value && c.fiber & (1 << (n - 1))\n          );\n          if (candidates.length === 1) {\n            hints.push({\n              index: this.all.indexOf(candidates[0]),\n              value: n\n            });\n          }\n        });\n      });\n    }\n\n    return hints;\n  }\n\n  get currentLink() {\n    return `new-game?values=${this.all\n      .map(p => p.value.toString(16))\n      .join('')}&locked=${this.all.map(p => (p.locked ? '1' : '0')).join('')}`;\n  }\n}\n\nfunction range(n, start = 0) {\n  return Array(n)\n    .fill()\n    .map((_, i) => i + start);\n}\n\nfunction shuffleArray(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    const idx = Math.floor(Math.random() * arr.length - i) + i;\n    [arr[i], arr[idx]] = [arr[idx], arr[i]];\n  }\n  return arr;\n}\n\nconst difficultyMap = {\n  4: {\n    1: 8,\n    2: 7,\n    3: 6,\n    4: 5,\n    5: 4\n  },\n  9: {\n    1: 40,\n    2: 35,\n    3: 30,\n    4: 25,\n    5: 22\n  },\n  16: {\n    1: 180,\n    2: 160,\n    3: 140,\n    4: 120,\n    5: 115 //103\n  }\n};\nfunction getVisibleCellsByDifficulty(difficulty, dim) {\n  return difficultyMap[dim][difficulty];\n}\n\nBoard.Cell = Cell;\n\nexport default Board;\n","import React from 'react';\nimport '../App.css';\n\nimport Board from '../lib/board';\n\n/** @param {{ dim: number, cell?: Board.Cell, onChange: () => void }} props */\nfunction ChoiceDialog(props) {\n    let { dim, cell, onChange } = props;\n\n    return <div style={{ display: 'flex' }}>\n        {Array(dim).fill().map((_, i) => i).map(i => {\n            return <button\n                key={i}\n                className={\"Options-Dialog-Button\" + (cell && cell.options[i] ? '' : ' Options-Dialog-Button-Pressed')}\n                onClick={() => {\n                    if(cell) {\n                        cell.options[i] = !cell.options[i];\n                        onChange();\n                    }\n                }}>{i + 1}</button>;\n        })}\n    </div>;\n}\n\nexport default ChoiceDialog;","import Board from './board';\n\nexport function range(n) {\n    return [...Array(n).keys()];\n}\n\n/** @param {Board} board */\nexport function isSolved(board) {\n    return (\n        board.rows.every(row => new Set(row.map(cell => cell.value)).size === board.dim)\n        &&\n        board.columns.every(column => new Set(column.map(cell => cell.value)).size === board.dim)\n        &&\n        board.blocks.every(block => new Set(block.map(cell => cell.value)).size === board.dim)\n    );\n}\n\n/** @param {Board} board */\nexport function setFibers(board) {\n    board.all.forEach(c => {\n        if (c.value) {\n            c.fiber = 0;\n            return;\n        }\n\n        let fiber = (1 << board.dim) - 1;\n        c.row.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.column.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.block.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.fiber = fiber;\n    })\n}\n\n/** @param {Board} board */\nexport function setFibersStrong(board) {\n    setFibers(board);\n\n    let fibersBefore;\n\n    do {\n        fibersBefore = board.all.map(c => c.fiber);\n        reduceFibers1(board);\n        reduceFibers2(board);\n        reduceFibers3(board);\n        swordfish(board);\n    } while (board.all.some((c, i) => c.fiber !== fibersBefore[i]));\n}\n\n/** @param {Board} board */\nexport function reduceFibers1(board) {\n    const { sqrt, dim } = board;\n\n    [\n        [board.rows.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].block.filter((_, idx) => Math.floor(idx / sqrt) !== groupI % sqrt)],\n        [board.columns.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].block.filter((cell) => cell.index % dim !== groupI % dim)],\n        [board.blocks.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].row.filter((_, idx) => Math.floor(idx / sqrt) !== groupI % sqrt)],\n        [board.blocks.map(block => block.map((c, i, arr) => arr[Math.floor(i / sqrt) + (i % sqrt) * sqrt])).flat(), (groupI, where, sourceGroup) => board.blocks[groupI][where].column.filter((cell, idx) => Math.floor(idx / sqrt) !== Math.floor(groupI / sqrt))]\n    ].forEach(([sourceGroup, getCellsToRemoveOptionFrom], sourceIdx) => {\n        const fibers = toChunks(sourceGroup, sqrt).map(order => order.filter(c => !c.value).reduce((totalFiber, c) => totalFiber | c.fiber, 0));\n        const fiberGroups = toChunks(fibers, sqrt);\n\n        range(dim).map(o => 1 << o).forEach(bit => {\n            fiberGroups.forEach((group, i) => {\n                const marks = group.map(fiber => !!(bit & fiber));\n                if (marks.filter(p => p).length === 1) {\n                    const where = marks.indexOf(true);\n                    const cellsToRemoveOptionFrom = getCellsToRemoveOptionFrom(i, where, sourceGroup);\n                    cellsToRemoveOptionFrom.forEach(cell => cell.fiber = cell.fiber & ~bit);\n                }\n            });\n        });\n    });\n}\n\n/** @param {Board} board */\nexport function reduceFibers2(board) {\n    const isHaving2Bits = isHavingBits.bind(null, 2);\n\n    const ordersArr = [board.rows, board.columns, board.blocks];\n    const triggeredArr = [new Set(), new Set(), new Set()];\n\n    let foundNew = false;\n    do {\n        foundNew = false;\n        for (let oArrIdx = 0; oArrIdx < ordersArr.length; oArrIdx++) {\n            const triggered = triggeredArr[oArrIdx];\n\n            for (const order of ordersArr[oArrIdx]) {\n                const having2Bits = order.filter(isHaving2Bits);\n                for (let i = 0; i < having2Bits.length; i++) {\n                    if (triggered.has(having2Bits[i].index)) continue;\n\n                    const fiber = having2Bits[i].fiber;\n                    for (let j = i + 1; j < having2Bits.length; j++) {\n\n                        if (fiber === having2Bits[j].fiber) {\n                            triggered.add(having2Bits[i].index).add(having2Bits[j].index); // found their match - can't be used again in the orderSet\n                            foundNew = true;\n                            console.log('reduceFibers2', having2Bits[i].index, having2Bits[j].index);\n                            for (const cell of order) {\n                                if (cell.fiber && (cell.fiber !== fiber)) {\n                                    cell.fiber = cell.fiber & ~(fiber);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } while (foundNew);\n}\n\n/** @param {Board} board */\nexport function reduceFibers3(board) {\n    const isHaving2to3Bits = (cell) => isHavingBits(2, cell) || isHavingBits(3, cell);\n\n    const ordersArr = [board.rows, board.columns, board.blocks];\n    const triggeredArr = [new Set(), new Set(), new Set()];\n\n    let foundNew = false;\n    do {\n        foundNew = false;\n        for (let oArrIdx = 0; oArrIdx < ordersArr.length; oArrIdx++) {\n            const triggered = triggeredArr[oArrIdx];\n\n            for (const order of ordersArr[oArrIdx]) {\n                const having2to3Bits = order.filter(isHaving2to3Bits);\n                for (let i = 0; i < having2to3Bits.length; i++) {\n                    if (triggered.has(having2to3Bits[i].index)) continue;\n                    for (let j = i + 1; j < having2to3Bits.length; j++) {\n                        if (triggered.has(having2to3Bits[j].index)) continue;\n                        for (let k = j + 1; k < having2to3Bits.length; k++) {\n                            if (triggered.has(having2to3Bits[k].index)) continue;\n                            \n                            const fiber = having2to3Bits[i].fiber | having2to3Bits[j].fiber | having2to3Bits[k].fiber;\n                            \n                            if (isHaving2to3Bits({fiber})) {\n                                const idxs = [i, j, k].map(idx => having2to3Bits[idx].index);\n                                idxs.forEach(triggered.add.bind(triggered)); // found their match - can't be used again in the orderSet\n                                const bitsToRemove = fiber;\n                                console.log('reduceFibers3', ...idxs);\n                                for (const cell of order) {\n                                    if (cell.fiber && !idxs.includes(cell.index)) {\n                                        cell.fiber = cell.fiber & ~(bitsToRemove);\n                                    }\n                                }\n\n                                foundNew = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } while (foundNew);\n}\n\nexport function isHavingBits(bits, cell) {\n    let counter = 0;\n    let fiber = cell.fiber;\n    do {\n        counter += fiber & 1;\n    } while (counter <= bits && (fiber = fiber >> 1));\n\n    return counter === bits;\n}\n\n/** @param {Board} board */\nexport function getHints(board) {\n    const hints = [...board.all.keys()]\n        .filter(i => !board.all[i].value && !(board.all[i].fiber & (board.all[i].fiber - 1)))\n        .map(i => ({\n            index: i,\n            value: board.all[i].fiber.toString(2).length,\n            reason: 'The only available option for this cell'\n        }));\n\n    range(board.dim).forEach(o => {\n        const value = o + 1;\n        const bit = 1 << o;\n        [\n            [board.rows, `only candidate for ${value} in row`],\n            [board.columns, `only candidate for ${value} in column`],\n            [board.blocks, `only candidate for ${value} in block`]\n        ].forEach(([ordersArr, reason]) => {\n            ordersArr.forEach(order => {\n                const candidates = order.filter(c => !c.value && (c.fiber & bit));\n                if (candidates.length === 1) {\n                    hints.push({\n                        index: board.all.indexOf(candidates[0]),\n                        value,\n                        reason\n                    });\n                }\n            });\n        });\n    });\n\n    return hints;\n}\n\n/** @param {Board} board */\nexport function swordfish(board) {\n    // https://www.kristanix.com/sudokuepic/sudoku-solving-techniques.php\n    // find columns where number is avaliable only in 2 cells.\n    // if one of their rows is also the same - add to trail\n    // if trail goes back - great.\n    // if not - move on\n\n    for(const n of range(board.dim)) {\n        const hasN = cell => cell.fiber & (1 << (n - 1));\n        /** @type {Board.Cell[]} */\n        const columnsWithOnly2N = board.columns.map(column => column.filter(hasN)).filter(column => column.length === 2).flat();\n        if(columnsWithOnly2N.length >= 4) {\n            const map = new Map();\n            columnsWithOnly2N.forEach(cell => {\n                let row = map.get(cell.row);\n                if(!row) {\n                    row = [];\n                    map.set(cell.row, row);\n                }\n                row.push(cell.index);\n            });\n            const rows = [...map.values()];\n            if(rows.every(row => row.length === 2)) {\n                console.log('swordfish', rows);\n                rows.forEach(row => {\n                    board.all[row[0]].row.filter(c => c.index !== row[0] && c.index !== row[1])\n                    .forEach(c => removeOptionFromFiber(c, n));\n                });\n            }\n        }\n    }\n}\n\nfunction removeOptionFromFiber(cell, n) {\n    cell.fiber = cell.fiber & ~(1 << (n - 1));\n}\n\n/** @type {<T>(arr: T[], size: number) => T[][]} */\nexport function toChunks(arr, size) {\n    return [...Array(arr.length / size).keys()].map(i => arr.slice(i * size, (i + 1) * size));\n}\n","import React, { Component } from 'react';\nimport Board from '../lib/board';\nimport ChoiceDialog from './ChoiceDialog';\nimport '../App.css';\nimport { getHints, isSolved, range, setFibersStrong } from '../lib/logic';\n\nclass BoardElement extends Component {\n  /** @param {{ dim: number, initialState: { values: number[], locked: number[] } }} props */\n  constructor(props) {\n    super(props);\n    const { initialState } = props;\n\n    this.state = {\n      board: (() => {\n        const b = new Board(this.props.dim);\n\n        if (initialState) {\n          b.all.forEach((c, i) => {\n            c.value = initialState.values[i];\n            c.locked = !!initialState.locked[i];\n          });\n        } else {\n          b.shuffleHard();\n          // b.shuffle();\n        }\n        b.all.forEach(c => {\n          c.state = { highlightedCell: false, highlightedNumber: false };\n        });\n\n        return b;\n      })(),\n      optionsMode: false\n    };\n\n    this.isEnded = false;\n    this.fullCounter = this.state.board.all.filter(cell => cell.value).length;\n\n    this.focusedCell = null;\n    // this.choiceDialog = new ChoiceDialog(() => this.setState(this.state));\n  }\n\n  render() {\n    const board = this.state.board;\n    const sqrt = board.sqrt;\n    /// for testing:\n    window.board = board;\n    ///\n\n    const page = (\n      <div className=\"App-header\">\n        <div>\n          <p style={this.state.error ? {} : { color: '#282c34' }}>\n            {this.state.error || 'something'}\n          </p>\n        </div>\n\n        <div>\n          <ChoiceDialog\n            dim={board.dim}\n            cell={this.focusedCell}\n            onChange={() => this.setState(this.state)}\n          />\n        </div>\n\n        <div>\n          {range(sqrt).map(i => (\n            <div style={{ display: 'flex' }}>\n              {range(sqrt).map(j => (\n                <div className=\"Board-Block\">\n                  {range(sqrt).map(k => (\n                    <div style={{ display: 'flex' }}>\n                      {range(sqrt).map(l => {\n                        const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                        if (!cell.value && cell.options.some(n => n)) {\n                          return this.getOptionsCell(cell);\n                        } else {\n                          return this.getNumberCell(cell);\n                        }\n                      })}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n\n        <div style={{ display: 'flex' }}>\n          <button\n            className=\"Buttons btn-green\"\n            onClick={() => {\n              if (board.solve()) {\n                this.setState(this.state);\n              } else {\n                this.setState({ ...this.state, error: 'Cannot be solved!' });\n              }\n            }}\n          >\n            Solve\n          </button>\n\n          <button\n            className=\"Buttons btn-yellow\"\n            onClick={() => {\n              board.all\n                .filter(c => !c.locked)\n                .forEach(c => {\n                  c.value = 0;\n                  c.options = Array(board.dim).fill();\n                });\n              board.all.forEach(c => {\n                c.state = { highlightedCell: false, highlightedNumber: false };\n              });\n              this.setState(this.state);\n            }}\n          >\n            Reset\n          </button>\n\n          <button\n            className=\"Buttons btn-red\"\n            onClick={() => {\n              this.props.onExit();\n            }}\n          >\n            Exit\n          </button>\n        </div>\n\n        <div style={{ display: 'flex' }}>\n          <button\n            className=\"Buttons btn-blue\"\n            onClick={() => {\n              this.showHint();\n            }}\n          >\n            Hint\n          </button>\n\n          <button\n            className=\"Buttons btn-blue\"\n            onClick={() => {\n              setFibersStrong(board);\n\n              board.all\n                .filter(c => c.value === 0)\n                .forEach(c => {\n                  c.options = c.options.map((_, i) => !!(c.fiber & (1 << i)));\n                });\n\n              this.setState(this.state);\n            }}\n          >\n            Find All Options\n          </button>\n        </div>\n      </div>\n    );\n\n    delete this.state.error;\n    return page;\n  }\n\n  getNumberCell(cell) {\n    const board = this.state.board;\n\n    return (\n      <div className=\"Cell\">\n        <input\n          type=\"text\"\n          maxLength=\"2\"\n          readOnly={this.isEnded || cell.locked}\n          key={cell.index}\n          className=\"Cell\"\n          style={{\n            backgroundColor: cell.locked\n              ? '#A7A7B4'\n              : cell.state.highlightedCell\n              ? 'rgba(255,255,255,0.8)'\n              : '',\n            color: cell.state.highlightedNumber ? 'blue' : '',\n            fontWeight: cell.state.highlightedNumber ? 'bolder' : 'bold'\n          }}\n          value={cell.value || ''}\n          onFocus={e => {\n            this.focusedCell = cell.value ? null : cell;\n\n            highlightLines(cell);\n            highlightNumber(cell, board);\n            this.setState(this.state);\n            if (!cell.locked) {\n              e.target.setSelectionRange(0, e.target.value.length);\n            }\n          }}\n          onBlur={() => {\n            unhighlightLines(cell);\n            highlightNumber(cell, board);\n            this.setState(this.state);\n          }}\n          onChange={e => {\n            const n = Number(e.target.value || 0);\n            this.changeValueOnBoard(n, cell, board);\n            this.focusedCell = cell.value ? null : cell;\n          }}\n        />\n      </div>\n    );\n  }\n\n  changeValueOnBoard(n, cell, board) {\n    if (n >= 0 && n <= this.props.dim) {\n      if (!!cell.value !== !!n) {\n        this.fullCounter += !!n ? 1 : -1;\n        if (this.fullCounter === board.dim ** 2) {\n          if (isSolved(board)) {\n            this.setState({ ...this.state, error: 'You Won!' });\n            this.isEnded = true;\n          } else {\n            this.setState({ ...this.state, error: 'Wrong!' });\n            this.isEnded = true;\n          }\n        }\n      }\n      cell.value = n;\n      this.setState(this.state);\n    }\n    highlightNumber(cell, board);\n  }\n\n  /** @param {Board.Cell} cell */\n  getOptionsCell(cell) {\n    const board = this.state.board;\n    const optionCellSize = Math.floor(30 / board.sqrt);\n\n    return (\n      <div className=\"Cell\">\n        <div\n          className=\"Cell options-container\"\n          key={cell.index}\n          tabIndex=\"0\"\n          readOnly={this.isEnded}\n          style={\n            this.focusedCell === cell\n              ? { color: 'blue', backgroundColor: 'beige' }\n              : cell.state.highlightedCell\n              ? { backgroundColor: 'rgba(255,255,255,0.8)' }\n              : {}\n          }\n          onFocus={e => {\n            this.focusedCell = cell;\n\n            highlightLines(cell);\n            highlightNumber(cell, board);\n            this.setState(this.state);\n          }}\n          onBlur={() => {\n            unhighlightLines(cell);\n            highlightNumber(cell, board);\n            this.setState(this.state);\n          }}\n          onKeyUp={e => {\n            if (/[0-9]/.test(e.key)) {\n              this.changeValueOnBoard(Number(e.key), cell, board);\n            }\n          }}\n        >\n          {cell.options.map((marked, i) => (\n            <div\n              className=\"options-cell\"\n              style={{\n                fontSize: `${\n                  board.sqrt === 4\n                    ? (optionCellSize / 2) | 0\n                    : optionCellSize - 1\n                }px`,\n                width: `${optionCellSize}px`,\n                height: `${optionCellSize}px`\n              }}\n            >\n              {marked ? i + 1 : ' '}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  showHint() {\n    setFibersStrong(this.state.board);\n    const hints = getHints(this.state.board);\n    console.log(hints);\n    const [hint] = hints;\n    if (hint) {\n      const board = this.state.board;\n      const cell = board.all[hint.index];\n      highlightLines(cell);\n      this.state.error = hint.reason;\n      this.changeValueOnBoard(hint.value, cell, board);\n      setTimeout(() => {\n        unhighlightLines(cell);\n      });\n    }\n\n    return hint;\n  }\n}\n\nexport default BoardElement;\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightNumber(cell, board) {\n  board.all.forEach(c => {\n    c.state.highlightedNumber = cell.value === c.value;\n  });\n}\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightLines(cell) {\n  cell.row.forEach(p => (p.state.highlightedCell = true));\n  cell.column.forEach(p => (p.state.highlightedCell = true));\n}\n\n/** @param {Board.Cell} cell */\nfunction unhighlightLines(cell) {\n  cell.row.forEach(p => (p.state.highlightedCell = false));\n  cell.column.forEach(p => (p.state.highlightedCell = false));\n}\n","export const MenuItems = {\n  NEW_GAME: 'new-game',\n  MENU: 'menu',\n  SOLVER: 'solver'\n};\n","import React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\nimport { MenuItems } from '../enums/MenuItems';\n\nclass BoardElement extends Component {\n  state = {\n    dim: this.props.dim\n  };\n\n  render() {\n    const board = new Board(this.state.dim);\n    const sqrt = board.sqrt;\n    return (\n      <div className=\"App-header\">\n        <button\n          className=\"Buttons\"\n          onClick={() => {\n            const nextState = { ...this.state, page: MenuItems.NEW_GAME };\n            this.setState(nextState);\n            this.props.onChange(nextState);\n          }}\n        >\n          New Game\n        </button>\n\n        <button\n          className=\"Buttons\"\n          onClick={() => {\n            const nextState = { ...this.state, page: MenuItems.SOLVER };\n            this.setState(nextState);\n            this.props.onChange(nextState);\n          }}\n        >\n          Solver\n        </button>\n\n        <select\n          className=\"Buttons\"\n          defaultValue={this.state.dim}\n          onInput={val => {\n            this.setState({ ...this.state, dim: Number(val.target.value) });\n          }}\n        >\n          <option value=\"4\">4x4</option>\n          <option value=\"9\">9x9</option>\n          <option value=\"16\">16x16</option>\n        </select>\n\n        <div>\n          {range(sqrt).map(i => (\n            <div key={'a' + i} style={{ display: 'flex' }}>\n              {range(sqrt).map(j => (\n                <div key={'b' + j} className=\"Board-Block\">\n                  {range(sqrt).map(k => (\n                    <div key={'l' + k} style={{ display: 'flex' }}>\n                      {range(sqrt).map(l => {\n                        const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                        return (\n                          <input\n                            key={cell.index}\n                            type=\"text\"\n                            maxLength=\"2\"\n                            readOnly={true}\n                            className=\"Cell-Mini\"\n                            value={cell.value || ''}\n                          />\n                        );\n                      })}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n  return [...Array(n).keys()];\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport BoardElement from './components/BoardElement';\nimport MenuElement from './components/MenuElement';\nimport SolverElement from './components/SolverElement';\nimport { MenuItems } from './enums/MenuItems';\n\nlet initialState;\n\nclass App extends Component {\n  state = {\n    dim: 9,\n    page: MenuItems.MENU\n  };\n\n  componentWillMount() {\n    document.title = 'Sudoku Game';\n\n    const menuItem = window.location.pathname.split('/').pop();\n    if (menuItem === MenuItems.NEW_GAME) {\n      const { values, locked } = window.location.search\n        .slice(1)\n        .split('&')\n        .map(pair => pair.split('='))\n        .map(pair => [pair[0], pair[1].split('').map(ch => parseInt(ch, 16))])\n        .reduce((obj, pair) => ((obj[pair[0]] = pair[1]), obj), {});\n\n      this.state.page = MenuItems.NEW_GAME;\n      initialState = { values, locked };\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {getPage(this.state, state => this.setState(state))}\n        </header>\n      </div>\n    );\n  }\n}\n\nfunction getPage(state, onChange) {\n  const { page, dim } = state;\n  switch (page) {\n    case MenuItems.NEW_GAME:\n      return (\n        <BoardElement\n          dim={dim}\n          initialState={initialState}\n          onExit={() => {\n            const regularPath = window.location.href.split(\n              MenuItems.NEW_GAME\n            )[0];\n            window.history.pushState(regularPath, document.title, regularPath);\n            initialState = undefined;\n            onChange({ ...state, page: 'menu' });\n          }}\n        ></BoardElement>\n      );\n    case MenuItems.MENU:\n      return <MenuElement dim={dim} onChange={onChange}></MenuElement>;\n    case MenuItems.SOLVER:\n      return (\n        <SolverElement\n          dim={dim}\n          onExit={() => onChange({ ...state, page: 'menu' })}\n        ></SolverElement>\n      );\n  }\n}\n\nexport default App;\n","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        board: new Board(this.props.dim)\n    }\n\n    render() {\n        const board = this.state.board;\n        const sqrt = board.sqrt;\n        /// for testing:\n        window.board = board;\n        ///\n\n        const page = (\n            <div className=\"App-header\">\n                <div>\n                    <p hidden={!this.state.error}>{this.state.error}</p>\n                </div>\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\" >\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    return <input\n                                        type=\"text\"\n                                        maxLength=\"2\"\n                                        className=\"Cell\"\n                                        style={{ backgroundColor: cell.locked ? 'gray' : '', borderColor: cell.locked ? 'gray' : '' }}\n                                        value={cell.value || ''}\n                                        onChange={e => {\n                                            const n = Number(e.target.value || 0);\n                                            if (n >= 0 && n <= this.props.dim) {\n                                                cell.value = n;\n                                                cell.locked = !!cell.value;\n                                                this.setState({ board });\n                                            }\n                                        }}\n                                    />\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-green\" onClick={() => {\n                        if (board.solve()) {\n                            this.setState({ board });\n                        } else {\n                            this.setState({ board, error: 'Cannot be solved!' });\n                        }\n                    }}>Solve</button>\n\n                    <button className=\"Buttons btn-yellow\" onClick={() => {\n                        this.setState({\n                            board: new Board(this.props.dim)\n                        });\n                    }}>Reset</button>\n\n                    <button className=\"Buttons btn-red\" onClick={() => {\n                        this.props.onExit();\n                    }}>Exit</button>\n                </div>\n            </div>\n        );\n\n        delete this.state.error;\n        return page;\n    }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}