{"version":3,"sources":["lib/board.js","components/BoardElement.jsx","components/MenuElement.jsx","components/SolverElement.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Cell","value","arguments","length","undefined","Object","classCallCheck","this","row","column","block","options","locked","Board","dim","sqrt","Math","pow","rows","Array","fill","map","p","columns","blocks","all","i","j","cell","backupState","_this","_this2","priority","range","ignoreInput","backup","filter","forEach","dir","_loop","val","priorityIdx","indexOf","some","rollback","_this3","_loop2","_loop3","visibleCells","getVisibleCellsByDifficulty","solvePriority","shuffleArray","solve","size","shuffledIndexes","valsRemoved","push","counter","isSolvable","pop","console","warn","concat","window","currVisible","lastValue","n","start","_","arr","idx","floor","random","_ref","difficultyMap","4","1","2","3","5","9","16","difficulty","BoardElement","props","possibleConstructorReturn","getPrototypeOf","call","state","board","b","shuffle","c","highlightedCell","highlightedNumber","optionsMode","isEnded","fullCounter","page","react_default","a","createElement","className","hidden","error","style","display","k","l","getOptionsCell","getNumberCell","onClick","setState","onExit","type","maxLength","readOnly","backgroundColor","color","fontWeight","onFocus","e","highlightLines","highlightNumber","target","setSelectionRange","onBlur","unhighlightLines","onChange","Number","isSolved","_this4","Component","toConsumableArray","keys","every","Set","nextState","objectSpread","defaultValue","onInput","borderColor","App","components_BoardElement","MenuElement","SolverElement","getPage","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.572ce3c0.chunk.js","sourcesContent":["class Cell {\n    constructor(value = 0) {\n        this.row = [];\n        this.column = [];\n        this.block = [];\n        this.value = value;\n        this.options = [];\n        this.locked = false;\n    }\n}\n\nclass Board {\n    constructor(dim) {\n        this.dim = dim;\n        const sqrt = this.sqrt = dim ** 0.5;\n        /** @type {Array<Array<Cell>>} */\n        this.rows = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Array<Cell>>} */\n        this.columns = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Array<Cell>>} */\n        this.blocks = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Cell>} */\n        this.all = new Array(dim ** 2).fill(0);\n        for (let i = 0; i < dim; i++) {\n            for (let j = 0; j < dim; j++) {\n                const cell = new Cell();\n\n                this.rows[i][j] = cell;\n                cell.row = this.rows[i];\n\n                this.columns[j][i] = cell;\n                cell.column = this.columns[j];\n\n                this.blocks[i - i % sqrt + (j - j % sqrt) / sqrt][(i % sqrt) * sqrt + j % sqrt] = cell;\n                cell.block = this.blocks[i - i % sqrt + (j - j % sqrt) / sqrt];\n\n                this.all[i * dim + j] = cell;\n            }\n        }\n    }\n\n    backup() {\n        this.backupState = this.all.map(cell => cell.value);\n    }\n\n    rollback() {\n        this.all.map((cell, i) => cell.value = this.backupState[i]);\n    }\n\n    solve(priority = range(this.dim, 1), ignoreInput) {\n        this.backup();\n        if(!ignoreInput) {\n            this.all.filter(cell => !cell.locked).forEach(cell => cell.value = 0);\n        }\n\n        let i = -1, dir = 1;\n        /** @type {Cell} */\n        let cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(cell => cell.value === val)\n                    ||\n                    cell.row.some(cell => cell.value === val)\n                    ||\n                    cell.column.some(cell => cell.value === val)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        if (i === -1) {\n            this.rollback();\n        }\n        return i > -1;\n    }\n\n    isSolvable(priority = range(this.dim, 1)) {\n        this.backup();\n\n        let i = -1, dir = 1;\n        let foundSolution = false;\n\n        /** @type {Cell} */\n        let cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(cell => cell.value === val)\n                    ||\n                    cell.row.some(cell => cell.value === val)\n                    ||\n                    cell.column.some(cell => cell.value === val)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        if (i === -1) {\n            this.rollback();\n            return false;\n        }\n\n        dir = -1;\n        foundSolution = true;\n\n        cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(cell => cell.value === val)\n                    ||\n                    cell.row.some(cell => cell.value === val)\n                    ||\n                    cell.column.some(cell => cell.value === val)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        this.rollback();\n        return i === -1 && foundSolution;\n    }\n\n    shuffle_test(difficulty = 5) {\n        const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n        \n        this.all.forEach(cell => { cell.locked = false; cell.value = 0; });\n        const solvePriority = shuffleArray(range(this.dim, 1));\n        this.solve(solvePriority, true);\n\n        const size = this.dim ** 2;\n        const shuffledIndexes = shuffleArray(range(size));\n        this.all.forEach(cell => cell.locked = true);\n        \n        let i;\n        const valsRemoved = [];\n        for(i = size - 1; i >= visibleCells; i--) {\n            const cell = this.all[shuffledIndexes[i]];\n            valsRemoved.push(cell.value);\n            cell.locked = false;\n            cell.value = 0;\n        }\n        i++;\n        let counter = 0;\n        while(!this.isSolvable(solvePriority)) {\n            this.all[shuffledIndexes[i]].value = valsRemoved.pop();\n            counter++;\n        }\n\n        if(counter > 0) {\n            console.warn(`Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${visibleCells - counter} visible cells`);\n            window.currVisible = visibleCells - counter;\n        }\n    }\n\n    shuffle(difficulty = 5) {\n        const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n\n        this.all.forEach(cell => { cell.locked = false; cell.value = 0; });\n        const priority = shuffleArray(range(this.dim, 1));\n        // FOR TESTING\n        window.priority = priority;\n        // \n        this.solve(priority, true);\n        this.all.forEach(cell => cell.locked = true);\n\n        const size = this.dim ** 2;\n        const shuffledIndexes = shuffleArray(range(size));\n        let currVisible = size;\n        let i = 0;\n        let lastValue, cell, isSolvable;\n        do {\n\n            do {\n                cell = this.all[shuffledIndexes[i]];\n                lastValue = cell.value;\n                cell.value = 0;\n                cell.locked = false;\n                i++;\n                currVisible--;\n                isSolvable = this.isSolvable(priority);\n            } while (isSolvable && currVisible > visibleCells && i < size);\n            \n            if (!isSolvable) {\n                currVisible++;\n                cell.value = lastValue;\n                cell.locked = true;\n            }\n        } while (currVisible > visibleCells && i < size);\n\n        if(currVisible > visibleCells) {\n            console.warn(`Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${currVisible} visible cells`);\n            window.currVisible = currVisible;\n        }\n    }\n}\n\nfunction range(n, start = 0) {\n    return Array(n).fill().map((_, i) => i + start);\n}\n\nfunction shuffleArray(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        const idx = Math.floor(Math.random() * arr.length - i) + i;\n        [arr[i], arr[idx]] = [arr[idx], arr[i]];\n    }\n    return arr;\n}\n\nconst difficultyMap = {\n    4: {\n        1 : 8, \n        2 : 7, \n        3 : 6, \n        4 : 5, \n        5 : 4\n    }, \n    9: {\n        1 : 40, \n        2 : 35, \n        3 : 30, \n        4 : 25, \n        5 : 22\n    }, \n    16: {\n        1 : 180, \n        2 : 160, \n        3 : 140, \n        4 : 120, \n        5 : 103\n    }\n}\nfunction getVisibleCellsByDifficulty(difficulty, dim) {\n    return difficultyMap[dim][difficulty];\n}\n\nBoard.Cell = Cell;\n\nexport default Board;","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        board: (() => {\n            const b = new Board(this.props.dim);\n            b.shuffle();\n            b.all.forEach(c => {\n                c.state = { highlightedCell: false, highlightedNumber: false };\n            });\n\n            return b;\n        })(), \n        optionsMode: false\n    }\n\n    /** @param {{ dim: number }} props */\n    constructor(props) {\n        super(props);\n        this.isEnded = false;\n        this.fullCounter = this.state.board.all.filter(cell => cell.value).length;\n    }\n\n    render() {\n        const board = this.state.board;\n        const sqrt = board.sqrt;\n        /// for testing:\n        window.board = board;\n        ///\n\n        const page = (\n\n            <div className=\"App-header\">\n                <div>\n                    <p hidden={!this.state.error}>{this.state.error}</p>\n                </div>\n\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\">\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    if(this.state.optionsMode) {\n                                        return this.getOptionsCell(cell);\n                                    } else {\n                                        return this.getNumberCell(cell);\n                                    }\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n                \n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-green\" onClick={() => {\n                        if (board.solve()) {\n                            this.setState({ board });\n                        } else {\n                            this.setState({ board, error: 'Cannot be solved!' });\n                        }\n                    }}>Solve</button>\n                    <button className=\"Buttons btn-yellow\" onClick={() => {\n                        board.all.filter(c => !c.locked).forEach(c => c.value = 0);\n                        board.all.forEach(c => {\n                            c.state = { highlightedCell: false, highlightedNumber: false };\n                        });\n                        this.setState({\n                            board\n                        });\n                    }}>Reset</button>\n\n                    <button className=\"Buttons btn-red\" onClick={() => {\n                        this.props.onExit();\n                    }}>Exit</button>\n                </div>\n            </div>\n        );\n\n        delete this.state.error;\n        return page;\n    }\n\n    getNumberCell(cell) {\n        const board = this.state.board;\n\n        return <input type=\"text\" maxLength=\"2\" readOnly={this.isEnded || cell.locked} className=\"Cell\" style={{\n            backgroundColor: cell.locked ? '#A7A7B4' : (cell.state.highlightedCell ? 'rgba(255,255,255,0.8)' : ''),\n            color: cell.state.highlightedNumber ? 'blue' : '',\n            fontWeight: cell.state.highlightedNumber ? 'bolder' : 'bold',\n        }} value={cell.value || ''} onFocus={(e) => {\n            highlightLines(cell);\n            this.setState(this.state);\n            highlightNumber(cell, board);\n            if (!cell.locked) {\n                e.target.setSelectionRange(0, e.target.value.length);\n            }\n        } } onBlur={() => {\n            unhighlightLines(cell);\n            highlightNumber(cell, board);\n            this.setState(this.state);\n        } } onChange={e => {\n            const n = Number(e.target.value || 0);\n            if (n >= 0 && n <= this.props.dim) {\n                if (!!cell.value !== !!n) {\n                    this.fullCounter += !!n ? 1 : -1;\n                    if (this.fullCounter === board.dim ** 2) {\n                        if (isSolved(board)) {\n                            this.setState({ board, error: 'You Won!' });\n                            this.isEnded = true;\n                        }\n                        else {\n                            this.setState({ board, error: 'Wrong!' });\n                            this.isEnded = true;\n                        }\n                    }\n                }\n                cell.value = n;\n                this.setState({ board });\n            }\n            highlightNumber(cell, board);\n        } } />;\n    }\n    \n    getOptionsCell(cell) {\n        const board = this.state.board;\n\n        return <input type=\"text\" maxLength=\"2\" readOnly={this.isEnded || cell.locked} className=\"Cell\" style={{\n            backgroundColor: cell.locked ? '#A7A7B4' : (cell.state.highlightedCell ? 'rgba(255,255,255,0.8)' : ''),\n            color: cell.state.highlightedNumber ? 'blue' : '',\n            fontWeight: cell.state.highlightedNumber ? 'bolder' : 'bold',\n        }} value={cell.value || ''} onFocus={(e) => {\n            highlightLines(cell);\n            this.setState(this.state);\n            highlightNumber(cell, board);\n            if (!cell.locked) {\n                e.target.setSelectionRange(0, e.target.value.length);\n            }\n        } } onBlur={() => {\n            unhighlightLines(cell);\n            highlightNumber(cell, board);\n            this.setState(this.state);\n        } } onChange={e => {\n            const n = Number(e.target.value || 0);\n            if (n >= 0 && n <= this.props.dim) {\n                if (!!cell.value !== !!n) {\n                    this.fullCounter += !!n ? 1 : -1;\n                    if (this.fullCounter === board.dim ** 2) {\n                        if (isSolved(board)) {\n                            this.setState({ board, error: 'You Won!' });\n                            this.isEnded = true;\n                        }\n                        else {\n                            this.setState({ board, error: 'Wrong!' });\n                            this.isEnded = true;\n                        }\n                    }\n                }\n                cell.value = n;\n                this.setState({ board });\n            }\n            highlightNumber(cell, board);\n        } } />;\n    }\n}\n\nexport default BoardElement;\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightNumber(cell, board) {\n    board.all.forEach(c => {\n        c.state.highlightedNumber = (cell.value === c.value);\n    });\n}\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightLines(cell) {\n    cell.row.forEach(p => p.state.highlightedCell = true);\n    cell.column.forEach(p => p.state.highlightedCell = true);\n}\n\n/** @param {Board.Cell} cell */\nfunction unhighlightLines(cell) {\n    cell.row.forEach(p => p.state.highlightedCell = false);\n    cell.column.forEach(p => p.state.highlightedCell = false);\n}\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}\n\n\n/** @param {Board} board */\nfunction isSolved(board) {\n    return (\n        board.rows.every(row => new Set(row.map(cell => cell.value)).size === board.dim)\n        &&\n        board.columns.every(column => new Set(column.map(cell => cell.value)).size === board.dim)\n        &&\n        board.blocks.every(block => new Set(block.map(cell => cell.value)).size === board.dim)\n    );\n}","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        dim: this.props.dim\n    }\n\n    render() {\n        const board = new Board(this.state.dim);\n        const sqrt = board.sqrt;\n        return (\n            <div className=\"App-header\" >\n                <button className=\"Buttons\" onClick={() => {\n                    const nextState = { ...this.state, page: 'new game' };\n                    this.setState(nextState);\n                    this.props.onChange(nextState);\n                }}>New Game</button>\n\n                <button className=\"Buttons\" onClick={() => {\n                    const nextState = { ...this.state, page: 'solver' };\n                    this.setState(nextState);\n                    this.props.onChange(nextState);\n                }}>Solver</button>\n\n                <select className=\"Buttons\" defaultValue={\"9\"} onInput={(val) => {\n                    this.setState({ ...this.state, dim: Number(val.target.value) });\n                    // this.props.onChange(this.state);\n                }}>\n                    <option value=\"4\">4x4</option>\n                    <option value=\"9\">9x9</option>\n                    <option value=\"16\">16x16</option>\n                </select>\n\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\">\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    return <input\n                                        type=\"text\"\n                                        maxLength=\"2\"\n                                        readOnly={true}\n                                        className=\"Cell-Mini\"\n                                        value={cell.value || ''}\n                                    />\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        board: new Board(this.props.dim)\n    }\n\n    render() {\n        const board = this.state.board;\n        const sqrt = board.sqrt;\n        /// for testing:\n        window.board = board;\n        ///\n\n        const page = (\n            <div className=\"App-header\">\n                <div>\n                    <p hidden={!this.state.error}>{this.state.error}</p>\n                </div>\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\" >\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    return <input\n                                        type=\"text\"\n                                        maxLength=\"2\"\n                                        className=\"Cell\"\n                                        style={{ backgroundColor: cell.locked ? 'gray' : '', borderColor: cell.locked ? 'gray' : '' }}\n                                        value={cell.value || ''}\n                                        onChange={e => {\n                                            const n = Number(e.target.value || 0);\n                                            if (n >= 0 && n <= this.props.dim) {\n                                                cell.value = n;\n                                                cell.locked = !!cell.value;\n                                                this.setState({ board });\n                                            }\n                                        }}\n                                    />\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-green\" onClick={() => {\n                        if (board.solve()) {\n                            this.setState({ board });\n                        } else {\n                            this.setState({ board, error: 'Cannot be solved!' });\n                        }\n                    }}>Solve</button>\n\n                    <button className=\"Buttons btn-yellow\" onClick={() => {\n                        this.setState({\n                            board: new Board(this.props.dim)\n                        });\n                    }}>Reset</button>\n\n                    <button className=\"Buttons btn-red\" onClick={() => {\n                        this.props.onExit();\n                    }}>Exit</button>\n                </div>\n            </div>\n        );\n\n        delete this.state.error;\n        return page;\n    }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}","import React, { Component } from 'react';\nimport './App.css';\nimport BoardElement from './components/BoardElement';\nimport MenuElement from './components/MenuElement';\nimport SolverElement from './components/SolverElement';\n\nclass App extends Component {\n  state = {\n    dim: 9,\n    page: 'menu'\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {getPage(this.state, state => this.setState(state))}\n        </header>\n      </div>\n    )\n  }\n}\n\nfunction getPage(state, onChange) {\n  switch(state.page) {\n    case 'new game': return <BoardElement dim={state.dim} onExit={() => onChange({ ...state, page: 'menu' })}></BoardElement>\n    case 'menu': return <MenuElement dim={state.dim} onChange={onChange}></MenuElement>\n    case 'solver': return <SolverElement dim={state.dim} onExit={() => onChange({ ...state, page: 'menu' })}></SolverElement>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}