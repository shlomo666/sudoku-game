{"version":3,"sources":["lib/board.js","lib/ChoiceDialog.js","components/BoardElement.jsx","components/MenuElement.jsx","components/SolverElement.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Cell","value","arguments","length","undefined","Object","classCallCheck","this","row","column","block","options","locked","fiber","index","Board","dim","sqrt","Math","pow","rows","Array","fill","map","p","columns","blocks","all","i","j","cell","toConsumableArray","backupState","_this","_this2","priority","range","ignoreInput","backup","filter","forEach","dir","_loop","val","priorityIdx","indexOf","some","rollback","_this3","_loop2","_loop3","visibleCells","getVisibleCellsByDifficulty","solvePriority","shuffleArray","solve","size","shuffledIndexes","valsRemoved","push","counter","isSolvable","pop","console","warn","concat","window","currVisible","shuffle","arr","getHints","_ref","every","c","lastValue","_this4","parseInt","repeat","_this5","setFibers","hints","toString","_loop4","n","ordersArr","order","candidates","_this6","keys","_loop5","start","_","idx","floor","random","_ref2","difficultyMap","4","1","2","3","5","9","16","difficulty","ChoiceDialog","onChange","visible","element","react_default","a","createElement","style","display","className","onClick","show","BoardElement","props","possibleConstructorReturn","getPrototypeOf","call","state","board","b","shuffleHard","highlightedCell","highlightedNumber","optionsMode","isEnded","fullCounter","choiceDialog","setState","page","error","color","k","l","getOptionsCell","getNumberCell","onExit","showHint","lastMarksCounter","marksCounter","reduceFibers","setFibersStrong","type","maxLength","readOnly","backgroundColor","fontWeight","onFocus","e","highlightLines","highlightNumber","target","setSelectionRange","onBlur","unhighlightLines","Number","changeValueOnBoard","Set","isSolved","objectSpread","marked","fontSize","width","height","reason","o","bit","_ref3","_ref4","slicedToArray","log","hint","setTimeout","Component","flat","groupI","where","sourceGroup","sourceIdx","getCellsToRemoveOptionFrom","fibers","toChunks","reduce","totalFiber","fiberGroups","group","marks","option","cellsToRemoveOptionFrom","slice","nextState","defaultValue","onInput","hidden","borderColor","App","components_BoardElement","MenuElement","SolverElement","getPage","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAAMA,EACF,SAAAA,IAAuB,IAAXC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAAGG,OAAAC,EAAA,EAAAD,CAAAE,KAAAP,GAEnBO,KAAKC,IAAM,GAEXD,KAAKE,OAAS,GAEdF,KAAKG,MAAQ,GACbH,KAAKN,MAAQA,EACbM,KAAKI,QAAU,GACfJ,KAAKK,QAAS,EACdL,KAAKM,MAAQ,EACbN,KAAKO,MAAQ,GAIfC,aACF,SAAAA,EAAYC,GAAMX,OAAAC,EAAA,EAAAD,CAAAE,KAAAQ,GACdR,KAAKS,IAAMA,EACX,IAAMC,EAAOV,KAAKU,KAALC,KAAAC,IAAYH,EAAO,IAEhCT,KAAKa,KAAO,IAAIC,MAAML,GAAKM,OAAOC,IAAI,SAAAC,GAAC,OAAI,IAAIH,MAAML,GAAKM,KAAK,KAE/Df,KAAKkB,QAAU,IAAIJ,MAAML,GAAKM,OAAOC,IAAI,SAAAC,GAAC,OAAI,IAAIH,MAAML,GAAKM,KAAK,KAElEf,KAAKmB,OAAS,IAAIL,MAAML,GAAKM,OAAOC,IAAI,SAAAC,GAAC,OAAI,IAAIH,MAAML,GAAKM,KAAK,KAEjEf,KAAKoB,IAAM,IAAIN,MAAJH,KAAAC,IAAUH,EAAO,IAAGM,KAAK,GACpC,IAAK,IAAIM,EAAI,EAAGA,EAAIZ,EAAKY,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAKa,IAAK,CAC1B,IAAMC,EAAO,IAAI9B,EAEjBO,KAAKa,KAAKQ,GAAGC,GAAKC,EAClBA,EAAKtB,IAAMD,KAAKa,KAAKQ,GAErBrB,KAAKkB,QAAQI,GAAGD,GAAKE,EACrBA,EAAKrB,OAASF,KAAKkB,QAAQI,GAE3BtB,KAAKmB,OAAOE,EAAIA,EAAIX,GAAQY,EAAIA,EAAIZ,GAAQA,GAAOW,EAAIX,EAAQA,EAAOY,EAAIZ,GAAQa,EAClFA,EAAKpB,MAAQH,KAAKmB,OAAOE,EAAIA,EAAIX,GAAQY,EAAIA,EAAIZ,GAAQA,GAEzDV,KAAKoB,IAAIC,EAAIZ,EAAMa,GAAKC,EAExBA,EAAKnB,QAALN,OAAA0B,EAAA,EAAA1B,CAAmBgB,MAAML,IACzBc,EAAKhB,MAAQc,EAAIZ,EAAMa,wDAM/BtB,KAAKyB,YAAczB,KAAKoB,IAAIJ,IAAI,SAAAO,GAAI,OAAIA,EAAK7B,2CAGtC,IAAAgC,EAAA1B,KACPA,KAAKoB,IAAIJ,IAAI,SAACO,EAAMF,GAAP,OAAaE,EAAK7B,MAAQgC,EAAKD,YAAYJ,qCAGV,IAAAM,EAAA3B,KAA5C4B,EAA4CjC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCkC,EAAM7B,KAAKS,IAAK,GAAIqB,EAAanC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9CG,KAAK+B,SACAD,GACD9B,KAAKoB,IAAIY,OAAO,SAAAT,GAAI,OAAKA,EAAKlB,SAAQ4B,QAAQ,SAAAV,GAAI,OAAIA,EAAK7B,MAAQ,IAMvE,IAHA,IAAI2B,GAAK,EAAGa,EAAM,EAEdX,EAAO,GARmCY,EAAA,WAa1C,GAHAd,GAAKa,IACLX,EAAOI,EAAKP,IAAIC,KAEHE,EAAKlB,OAAQ,iBAE1B,IAAI+B,EAAMb,EAAK7B,MACX2C,EAAcT,EAASU,QAAQF,GACnC,GAEIA,EAAMR,IADNS,SAIAA,EAAcT,EAAShC,SAGnB2B,EAAKpB,MAAMoC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,KAEvCb,EAAKtB,IAAIsC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,KAErCb,EAAKrB,OAAOqC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,MAG5CC,EAAcT,EAAShC,QACvB2B,EAAK7B,MAAQ0C,EACbF,EAAM,IAENX,EAAK7B,MAAQ,EACbwC,GAAO,IA5BRX,GAAMY,IAmCb,OAHW,IAAPd,GACArB,KAAKwC,WAEFnB,GAAK,uCAG0B,IAAAoB,EAAAzC,KAA/B4B,EAA+BjC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApBkC,EAAM7B,KAAKS,IAAK,GAClCT,KAAK+B,SAOL,IALA,IAAIV,GAAK,EAAGa,EAAM,EAIdX,EAAO,GAP2BmB,EAAA,WAYlC,GAHArB,GAAKa,IACLX,EAAOkB,EAAKrB,IAAIC,KAEHE,EAAKlB,OAAQ,iBAE1B,IAAI+B,EAAMb,EAAK7B,MACX2C,EAAcT,EAASU,QAAQF,GACnC,GAEIA,EAAMR,IADNS,SAIAA,EAAcT,EAAShC,SAGnB2B,EAAKpB,MAAMoC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,KAEvCb,EAAKtB,IAAIsC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,KAErCb,EAAKrB,OAAOqC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,MAG5CC,EAAcT,EAAShC,QACvB2B,EAAK7B,MAAQ0C,EACbF,EAAM,IAENX,EAAK7B,MAAQ,EACbwC,GAAO,IA5BRX,GAAMmB,IAgCb,IAAW,IAAPrB,EAEA,OADArB,KAAKwC,YACE,EAGXN,GAAO,EAGPX,EAAO,GACP,IAjDsC,IAAAoB,EAAA,WAqDlC,GAHAtB,GAAKa,IACLX,EAAOkB,EAAKrB,IAAIC,KAEHE,EAAKlB,OAAQ,iBAE1B,IAAI+B,EAAMb,EAAK7B,MACX2C,EAAcT,EAASU,QAAQF,GACnC,GAEIA,EAAMR,IADNS,SAIAA,EAAcT,EAAShC,SAGnB2B,EAAKpB,MAAMoC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,KAEvCb,EAAKtB,IAAIsC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,KAErCb,EAAKrB,OAAOqC,KAAK,SAAAhB,GAAI,OAAIA,EAAK7B,QAAU0C,MAG5CC,EAAcT,EAAShC,QACvB2B,EAAK7B,MAAQ0C,EACbF,EAAM,IAENX,EAAK7B,MAAQ,EACbwC,GAAO,IA5BRX,GAAMoB,IAiCb,OADA3C,KAAKwC,YACS,IAAPnB,IApCS,yCAuCS,IACnBuB,EAAeC,EADIlD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACuCK,KAAKS,KAElET,KAAKoB,IAAIa,QAAQ,SAAAV,GAAUA,EAAKlB,QAAS,EAAOkB,EAAK7B,MAAQ,IAC7D,IAAMoD,EAAgBC,EAAalB,EAAM7B,KAAKS,IAAK,IACnDT,KAAKgD,MAAMF,GAAe,GAE1B,IAIIzB,EAJE4B,EAAItC,KAAAC,IAAGZ,KAAKS,IAAO,GACnByC,EAAkBH,EAAalB,EAAMoB,IAC3CjD,KAAKoB,IAAIa,QAAQ,SAAAV,GAAI,OAAIA,EAAKlB,QAAS,IAGvC,IAAM8C,EAAc,GACpB,IAAK9B,EAAI4B,EAAO,EAAG5B,GAAKuB,EAAcvB,IAAK,CACvC,IAAME,EAAOvB,KAAKoB,IAAI8B,EAAgB7B,IACtC8B,EAAYC,KAAK7B,EAAK7B,OACtB6B,EAAKlB,QAAS,EACdkB,EAAK7B,MAAQ,EAEjB2B,IAEA,IADA,IAAIgC,EAAU,GACNrD,KAAKsD,WAAWR,IACpB9C,KAAKoB,IAAI8B,EAAgB7B,IAAI3B,MAAQyD,EAAYI,MACjDF,IAGAA,EAAU,IACVG,QAAQC,KAAR,wDAAAC,OAAqEd,EAArE,+BAAAc,OAA+Gd,EAAeS,EAA9H,mBACAM,OAAOC,YAAchB,EAAeS,yCAKxC,EAAG,CACCrD,KAAK6D,UAEL,IAAIC,OAAG,EACP,IACIA,EAAM9D,KAAK+D,YACP9B,QAAQ,SAAA+B,GAAA,IAAGzC,EAAHyC,EAAGzC,KAAM7B,EAATsE,EAAStE,MAAT,OAAqB6B,EAAK7B,MAAQA,UACzCoE,EAAIlE,OAAS,SAEjBI,KAAKoB,IAAI6C,MAAM,SAAAC,GAAC,OAAIA,EAAExE,MAAQ,KAGvCM,KAAKoB,IAAIY,OAAO,SAAAkC,GAAC,OAAKA,EAAE7D,SAAQ4B,QAAQ,SAAAiC,GAAC,OAAIA,EAAExE,MAAQ,sCAGnC,IACdkD,EAAeC,EADDlD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAC4CK,KAAKS,KAElET,KAAKoB,IAAIa,QAAQ,SAAAV,GAAUA,EAAKlB,QAAS,EAAOkB,EAAK7B,MAAQ,IAC7D,IAAMkC,EAAWmB,EAAalB,EAAM7B,KAAKS,IAAK,IAE9CkD,OAAO/B,SAAWA,EAElB5B,KAAKgD,MAAMpB,GAAU,GACrB5B,KAAKoB,IAAIa,QAAQ,SAAAV,GAAI,OAAIA,EAAKlB,QAAS,IAEvC,IAII8D,EAAW5C,EAAM+B,EAJfL,EAAItC,KAAAC,IAAGZ,KAAKS,IAAO,GACnByC,EAAkBH,EAAalB,EAAMoB,IACvCW,EAAcX,EACd5B,EAAI,EAER,EAAG,CAEC,GAEI8C,GADA5C,EAAOvB,KAAKoB,IAAI8B,EAAgB7B,KACf3B,MACjB6B,EAAK7B,MAAQ,EACb6B,EAAKlB,QAAS,EACdgB,IACAuC,IACAN,EAAatD,KAAKsD,WAAW1B,SACxB0B,GAAcM,EAAchB,GAAgBvB,EAAI4B,GAEpDK,IACDM,IACArC,EAAK7B,MAAQyE,EACb5C,EAAKlB,QAAS,SAEbuD,EAAchB,GAAgBvB,EAAI4B,GAEvCW,EAAchB,IACdY,QAAQC,KAAR,wDAAAC,OAAqEd,EAArE,+BAAAc,OAA+GE,EAA/G,mBACAD,OAAOC,YAAcA,uCAKjB,IAAAQ,EAAApE,KACRA,KAAKoB,IAAIY,OAAO,SAAAkC,GAAC,OAAKA,EAAExE,QAAOuC,QAAQ,SAAAiC,GACnC,IAAI5D,EAAQ+D,SAAS,IAAIC,OAAOF,EAAK3D,KAAM,GAC3CyD,EAAEjE,IAAI+B,OAAO,SAAAkC,GAAC,OAAIA,EAAExE,QAAOuC,QAAQ,SAAAV,GAAI,OAAIjB,KAAkB,GAAMiB,EAAK7B,MAAQ,KAChFwE,EAAEhE,OAAO8B,OAAO,SAAAkC,GAAC,OAAIA,EAAExE,QAAOuC,QAAQ,SAAAV,GAAI,OAAIjB,KAAkB,GAAMiB,EAAK7B,MAAQ,KACnFwE,EAAE/D,MAAM6B,OAAO,SAAAkC,GAAC,OAAIA,EAAExE,QAAOuC,QAAQ,SAAAV,GAAI,OAAIjB,KAAkB,GAAMiB,EAAK7B,MAAQ,KAClFwE,EAAE5D,MAAQA,uCAIP,IAAAiE,EAAAvE,KACPA,KAAKwE,YAML,IAJA,IAAMC,EAAQzE,KAAKoB,IACdY,OAAO,SAAAkC,GAAC,OAAKA,EAAExE,SAAWwE,EAAE5D,MAAS4D,EAAE5D,MAAQ,KAC/CU,IAAI,SAAAkD,GAAC,MAAK,CAAE3C,KAAM2C,EAAGxE,MAAOwE,EAAE5D,MAAMoE,SAAS,GAAG9E,UAL9C+E,EAAA,SAOEC,GACL,CACIL,EAAK1D,KACL0D,EAAKrD,QACLqD,EAAKpD,QACPc,QAAQ,SAAA4C,GACNA,EAAU5C,QAAQ,SAAA6C,GACd,IAAMC,EAAaD,EAAM9C,OAAO,SAAAkC,GAAC,OAAKA,EAAExE,OAAUwE,EAAE5D,MAAS,GAAMsE,EAAI,IAC7C,IAAtBG,EAAWnF,QACX6E,EAAMrB,KAAK,CACP7B,KAAMwD,EAAW,GACjBrF,MAAOkF,SAXlBA,EAAI,EAAGA,GAAK5E,KAAKS,IAAKmE,IAAKD,EAA3BC,GAkBT,OAAOH,6CAQP,IALe,IAAAO,EAAAhF,KACTyE,EAAQ3E,OAAA0B,EAAA,EAAA1B,CAAIE,KAAKoB,IAAI6D,QACtBjD,OAAO,SAAAX,GAAC,OAAK2D,EAAK5D,IAAIC,GAAG3B,SAAWsF,EAAK5D,IAAIC,GAAGf,MAAS0E,EAAK5D,IAAIC,GAAGf,MAAQ,KAC7EU,IAAI,SAAAK,GAAC,MAAK,CAAEd,MAAOc,EAAG3B,MAAOsF,EAAK5D,IAAIC,GAAGf,MAAMoE,SAAS,GAAG9E,UAHjDsF,EAAA,SAKNN,GACL,CACII,EAAKnE,KACLmE,EAAK9D,QACL8D,EAAK7D,QACPc,QAAQ,SAAA4C,GACNA,EAAU5C,QAAQ,SAAA6C,GACd,IAAMC,EAAaD,EAAM9C,OAAO,SAAAkC,GAAC,OAAKA,EAAExE,OAAUwE,EAAE5D,MAAS,GAAMsE,EAAI,IAC7C,IAAtBG,EAAWnF,QACX6E,EAAMrB,KAAK,CACP7C,MAAOyE,EAAK5D,IAAIkB,QAAQyC,EAAW,IACnCrF,MAAOkF,SAXlBA,EAAI,EAAGA,GAAK5E,KAAKS,IAAKmE,IAAKM,EAA3BN,GAkBT,OAAOH,WAIf,SAAS5C,EAAM+C,GAAc,IAAXO,EAAWxF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACtB,OAAOmB,MAAM8D,GAAG7D,OAAOC,IAAI,SAACoE,EAAG/D,GAAJ,OAAUA,EAAI8D,IAG7C,SAASpC,EAAae,GAClB,IAAK,IAAIzC,EAAI,EAAGA,EAAIyC,EAAIlE,OAAQyB,IAAK,CACjC,IAAMgE,EAAM1E,KAAK2E,MAAM3E,KAAK4E,SAAWzB,EAAIlE,OAASyB,GAAKA,EADxBmE,EAEZ,CAAC1B,EAAIuB,GAAMvB,EAAIzC,IAAnCyC,EAAIzC,GAF4BmE,EAAA,GAExB1B,EAAIuB,GAFoBG,EAAA,GAIrC,OAAO1B,EAGX,IAAM2B,EAAgB,CAClBC,EAAG,CACCC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHH,EAAG,EACHI,EAAG,GAEPC,EAAG,CACCJ,EAAG,GACHC,EAAG,GACHC,EAAG,GACHH,EAAG,GACHI,EAAG,IAEPE,GAAI,CACAL,EAAG,IACHC,EAAG,IACHC,EAAG,IACHH,EAAG,IACHI,EAAG,MAGX,SAASjD,EAA4BoD,EAAYxF,GAC7C,OAAOgF,EAAchF,GAAKwF,GAG9BzF,EAAMf,KAAOA,EAEEe,QC3VA0F,aAhCX,SAAAA,EAAYC,GAAWrG,OAAAC,EAAA,EAAAD,CAAAE,KAAAkG,GACnBlG,KAAKmG,SAAWA,EAChBnG,KAAKoG,SAAU,EACfpG,KAAKqG,QAAU,KACfrG,KAAKuB,KAAO,sDAIXA,GAAM,IAAAG,EAAA1B,KACPA,KAAKoG,SAAU,EACfpG,KAAKuB,KAAOA,EACZvB,KAAKqG,QAAUC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACjC5F,MAAMS,EAAKtB,IAAIL,QAAQmB,OAAOC,IAAI,SAACoE,EAAG/D,GAAJ,OAAUA,IAAGL,IAAI,SAAAK,GAChD,OAAOiF,EAAAC,EAAAC,cAAA,UACPG,UAAW,yBAA2BpF,EAAKnB,QAAQiB,GAAK,GAAK,kCAC7DuF,QAAS,WACLrF,EAAKnB,QAAQiB,IAAME,EAAKnB,QAAQiB,GAChCK,EAAKmF,KAAKtF,GACVG,EAAKyE,aACL9E,EAAI,MAIhBrB,KAAKmG,0CAILnG,KAAKoG,SAAU,EACfpG,KAAKmG,oBCgMEW,cA3MX,SAAAA,EAAYC,GAAO,IAAArF,EAAA,OAAA5B,OAAAC,EAAA,EAAAD,CAAAE,KAAA8G,IACfpF,EAAA5B,OAAAkH,EAAA,EAAAlH,CAAAE,KAAAF,OAAAmH,EAAA,EAAAnH,CAAAgH,GAAAI,KAAAlH,KAAM+G,KAhBVI,MAAQ,CACJC,MAAQ,WACJ,IAAMC,EAAI,IAAI7G,EAAMkB,EAAKqF,MAAMtG,KAO/B,OANA4G,EAAEC,cAEFD,EAAEjG,IAAIa,QAAQ,SAAAiC,GACVA,EAAEiD,MAAQ,CAAEI,iBAAiB,EAAOC,mBAAmB,KAGpDH,EARH,GAURI,aAAa,GAMb/F,EAAKgG,SAAU,EACfhG,EAAKiG,YAAcjG,EAAKyF,MAAMC,MAAMhG,IAAIY,OAAO,SAAAT,GAAI,OAAIA,EAAK7B,QAAOE,OAEnE8B,EAAKkG,aAAe,IAAI1B,EAAa,kBAAMxE,EAAKmG,SAASnG,EAAKyF,SAL/CzF,wEAQV,IAAAC,EAAA3B,KACCoH,EAAQpH,KAAKmH,MAAMC,MACnB1G,EAAO0G,EAAM1G,KAEnBiD,OAAOyD,MAAQA,EAGf,IAAMU,EAEFxB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,MAAOzG,KAAKmH,MAAMY,MAAQ,GAAK,CAAEC,MAAO,YAAchI,KAAKmH,MAAMY,OAAS,cAGhF/H,KAAKmH,MAAMM,aAAezH,KAAK4H,aAAaxB,QACzCE,EAAAC,EAAAC,cAAA,WACKxG,KAAK4H,aAAavB,SAGvB,KAGJC,EAAAC,EAAAC,cAAA,WACK3E,EAAMnB,GAAMM,IAAI,SAAAK,GAAC,OAAIiF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACxC7E,EAAMnB,GAAMM,IAAI,SAAAM,GAAC,OAAIgF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAChC9E,EAAMnB,GAAMM,IAAI,SAAAiH,GAAC,OAAI3B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACxC7E,EAAMnB,GAAMM,IAAI,SAAAkH,GACb,IAAM3G,EAAO6F,EAAMjG,OAAOE,EAAIX,EAAOY,GAAG2G,EAAIvH,EAAOwH,GACnD,OAAK3G,EAAK7B,OAASiC,EAAKwF,MAAMM,YACnB9F,EAAKwG,eAAe5G,GAEpBI,EAAKyG,cAAc7G,eASlD+E,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACnBJ,EAAAC,EAAAC,cAAA,UAAQG,UAAU,oBAAoBC,QAAS,WACvCQ,EAAMpE,QACNrB,EAAKkG,SAASlG,EAAKwF,QAEnBxF,EAAKwF,MAAMY,MAAQ,oBACnBpG,EAAKkG,SAASlG,EAAKwF,UAL3B,SASAb,EAAAC,EAAAC,cAAA,UAAQG,UAAU,mBAAmBC,QAAS,WAC1CjF,EAAKwF,MAAMM,aAAe9F,EAAKwF,MAAMM,YACrC9F,EAAKkG,SAASlG,EAAKwF,SAFvB,kBAKAb,EAAAC,EAAAC,cAAA,UAAQG,UAAU,qBAAqBC,QAAS,WAC5CQ,EAAMhG,IAAIY,OAAO,SAAAkC,GAAC,OAAKA,EAAE7D,SAAQ4B,QAAQ,SAAAiC,GAAC,OAAIA,EAAExE,MAAQ,IACxD0H,EAAMhG,IAAIa,QAAQ,SAAAiC,GACdA,EAAEiD,MAAQ,CAAEI,iBAAiB,EAAOC,mBAAmB,KAE3D7F,EAAKkG,SAASlG,EAAKwF,SALvB,SAQAb,EAAAC,EAAAC,cAAA,UAAQG,UAAU,kBAAkBC,QAAS,WACzCjF,EAAKoF,MAAMsB,WADf,SAKJ/B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACnBJ,EAAAC,EAAAC,cAAA,UAAQG,UAAU,mBAAmBC,QAAS,WAC1CjF,EAAK2G,aADT,QAIAhC,EAAAC,EAAAC,cAAA,UAAQG,UAAU,mBAAmBC,QAAS,YA6KlE,SAAyBQ,GACrB5C,EAAU4C,GAEV,IAAsBmB,EAAlBC,EAAe,EAEnB,KAAOA,IAAiBD,GACpBA,EAAmBC,EACnBA,EAAeC,EAAarB,GAnLZsB,CAAgBtB,GAEhBA,EAAMhG,IAAIY,OAAO,SAAAkC,GAAC,OAAgB,IAAZA,EAAExE,QAAauC,QAAQ,SAAAiC,GACzCA,EAAE9D,QAAU8D,EAAE9D,QAAQY,IAAI,SAACoE,EAAG/D,GAAJ,SAAa6C,EAAE5D,MAAS,GAAKe,OAG3DM,EAAKkG,SAASlG,EAAKwF,SAPvB,sBAcZ,cADOnH,KAAKmH,MAAMY,MACXD,wCAGGvG,GAAM,IAAAkB,EAAAzC,KACVoH,EAAQpH,KAAKmH,MAAMC,MAEzB,OAAOd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QAClBL,EAAAC,EAAAC,cAAA,SACImC,KAAK,OACLC,UAAU,IACVC,SAAU7I,KAAK0H,SAAWnG,EAAKlB,OAC/BsG,UAAU,OACVF,MAAO,CACHqC,gBAAiBvH,EAAKlB,OAAS,UAAakB,EAAK4F,MAAMI,gBAAkB,wBAA0B,GACnGS,MAAOzG,EAAK4F,MAAMK,kBAAoB,OAAS,GAC/CuB,WAAYxH,EAAK4F,MAAMK,kBAAoB,SAAW,QAE1D9H,MAAO6B,EAAK7B,OAAS,GACrBsJ,QAAS,SAACC,GACNC,EAAe3H,GACf4H,EAAgB5H,EAAM6F,GACtB3E,EAAKoF,SAASpF,EAAK0E,OACd5F,EAAKlB,QACN4I,EAAEG,OAAOC,kBAAkB,EAAGJ,EAAEG,OAAO1J,MAAME,SAGrD0J,OAAQ,WACJC,EAAiBhI,GACjB4H,EAAgB5H,EAAM6F,GACtB3E,EAAKoF,SAASpF,EAAK0E,QAEvBhB,SAAU,SAAA8C,GACN,IAAMrE,EAAI4E,OAAOP,EAAEG,OAAO1J,OAAS,GACnC+C,EAAKgH,mBAAmB7E,EAAGrD,EAAM6F,kDAK9BxC,EAAGrD,EAAM6F,GACpBxC,GAAK,GAAKA,GAAK5E,KAAK+G,MAAMtG,QACpBc,EAAK7B,UAAYkF,IACnB5E,KAAK2H,aAAiB/C,EAAI,GAAK,EAC3B5E,KAAK2H,cAALhH,KAAAC,IAAqBwG,EAAM3G,IAAO,MA+FtD,SAAkB2G,GACd,OACIA,EAAMvG,KAAKoD,MAAM,SAAAhE,GAAG,OAAI,IAAIyJ,IAAIzJ,EAAIe,IAAI,SAAAO,GAAI,OAAIA,EAAK7B,SAAQuD,OAASmE,EAAM3G,OAE5E2G,EAAMlG,QAAQ+C,MAAM,SAAA/D,GAAM,OAAI,IAAIwJ,IAAIxJ,EAAOc,IAAI,SAAAO,GAAI,OAAIA,EAAK7B,SAAQuD,OAASmE,EAAM3G,OAErF2G,EAAMjG,OAAO8C,MAAM,SAAA9D,GAAK,OAAI,IAAIuJ,IAAIvJ,EAAMa,IAAI,SAAAO,GAAI,OAAIA,EAAK7B,SAAQuD,OAASmE,EAAM3G,MApGlEkJ,CAASvC,IAKTpH,KAAK6H,SAAL/H,OAAA8J,EAAA,EAAA9J,CAAA,GAAmBE,KAAKmH,MAAxB,CAA+BY,MAAO,YACtC/H,KAAK0H,SAAU,IALf1H,KAAK6H,SAAL/H,OAAA8J,EAAA,EAAA9J,CAAA,GAAmBE,KAAKmH,MAAxB,CAA+BY,MAAO,cACtC/H,KAAK0H,SAAU,KAQ3BnG,EAAK7B,MAAQkF,EACb5E,KAAK6H,SAAS7H,KAAKmH,QAEvBgC,EAAgB5H,EAAM6F,0CAIX7F,GAAM,IAAA6C,EAAApE,KACHA,KAAKmH,MAAMC,MAEzB,OAAOd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QAClBL,EAAAC,EAAAC,cAAA,OACIG,UAAU,yBACVF,MAAOzG,KAAK4H,aAAarG,OAASA,EAAO,CAAEyG,MAAO,OAAQc,gBAAiB,SAAY,GACvFlC,QAAS,SAACqC,GACN7E,EAAKwD,aAAaf,KAAKtF,GACvB6C,EAAKyD,SAASzD,EAAK+C,QAEvBmC,OAAQ,WACJlF,EAAKyD,SAASzD,EAAK+C,SAGtB5F,EAAKnB,QAAQY,IAAI,SAAC6I,EAAQxI,GAAT,OACdiF,EAAAC,EAAAC,cAAA,OACIG,UAAU,eACVF,MAAO,CACHqD,SAAU,MACVC,MAAO,OACPC,OAAQ,SACRH,EAASxI,EAAI,EAAI,4CAOrCmD,EAAUxE,KAAKmH,MAAMC,OACrB,IAAM3C,EAiHd,SAAkB2C,GACd,IAAM3C,EAAQ3E,OAAA0B,EAAA,EAAA1B,CAAIsH,EAAMhG,IAAI6D,QACvBjD,OAAO,SAAAX,GAAC,OAAK+F,EAAMhG,IAAIC,GAAG3B,SAAW0H,EAAMhG,IAAIC,GAAGf,MAAS8G,EAAMhG,IAAIC,GAAGf,MAAQ,KAChFU,IAAI,SAAAK,GAAC,MAAK,CACPd,MAAOc,EACP3B,MAAO0H,EAAMhG,IAAIC,GAAGf,MAAMoE,SAAS,GAAG9E,OACtCqK,OAAQ,6CAuBhB,OArBApI,EAAMuF,EAAM3G,KAAKwB,QAAQ,SAAAiI,GACrB,IAAMxK,EAAQwK,EAAI,EACZC,EAAM,GAAKD,EACjB,CACI,CAAC9C,EAAMvG,KAAP,sBAAA6C,OAAmChE,EAAnC,YACA,CAAC0H,EAAMlG,QAAP,sBAAAwC,OAAsChE,EAAtC,eACA,CAAC0H,EAAMjG,OAAP,sBAAAuC,OAAqChE,EAArC,eACFuC,QAAQ,SAAAmI,GAAyB,IAAAC,EAAAvK,OAAAwK,EAAA,EAAAxK,CAAAsK,EAAA,GAAvBvF,EAAuBwF,EAAA,GAAZJ,EAAYI,EAAA,GAC/BxF,EAAU5C,QAAQ,SAAA6C,GACd,IAAMC,EAAaD,EAAM9C,OAAO,SAAAkC,GAAC,OAAKA,EAAExE,OAAUwE,EAAE5D,MAAQ6J,IAClC,IAAtBpF,EAAWnF,QACX6E,EAAMrB,KAAK,CACP7C,MAAO6G,EAAMhG,IAAIkB,QAAQyC,EAAW,IACpCrF,QACAuK,iBAObxF,EA9IWV,CAAS/D,KAAKmH,MAAMC,OAClC5D,QAAQ+G,IAAI9F,GAHL,IAIA+F,EAJA1K,OAAAwK,EAAA,EAAAxK,CAIQ2E,EAJR,MAKP,GAAI+F,EAAM,CACN,IAAMpD,EAAQpH,KAAKmH,MAAMC,MACnB7F,EAAO6F,EAAMhG,IAAIoJ,EAAKjK,OAC5B2I,EAAe3H,GACfvB,KAAKmH,MAAMY,MAAQyC,EAAKP,OACxBjK,KAAKyJ,mBAAmBe,EAAK9K,MAAO6B,EAAM6F,GAC1CqD,WAAW,WACPlB,EAAiBhI,KAIzB,OAAOiJ,SAxNYE,aAgO3B,SAASvB,EAAgB5H,EAAM6F,GAC3BA,EAAMhG,IAAIa,QAAQ,SAAAiC,GACdA,EAAEiD,MAAMK,kBAAqBjG,EAAK7B,QAAUwE,EAAExE,QAMtD,SAASwJ,EAAe3H,GACpBA,EAAKtB,IAAIgC,QAAQ,SAAAhB,GAAC,OAAIA,EAAEkG,MAAMI,iBAAkB,IAChDhG,EAAKrB,OAAO+B,QAAQ,SAAAhB,GAAC,OAAIA,EAAEkG,MAAMI,iBAAkB,IAIvD,SAASgC,EAAiBhI,GACtBA,EAAKtB,IAAIgC,QAAQ,SAAAhB,GAAC,OAAIA,EAAEkG,MAAMI,iBAAkB,IAChDhG,EAAKrB,OAAO+B,QAAQ,SAAAhB,GAAC,OAAIA,EAAEkG,MAAMI,iBAAkB,IAGvD,SAAS1F,EAAM+C,GACX,OAAO9E,OAAA0B,EAAA,EAAA1B,CAAIgB,MAAM8D,GAAGK,QAgBxB,SAAST,EAAU4C,GACfA,EAAMhG,IAAIY,OAAO,SAAAkC,GAAC,OAAKA,EAAExE,QAAOuC,QAAQ,SAAAiC,GACpC,IAAI5D,EAAQ+D,SAAS,IAAIC,OAAO8C,EAAM3G,KAAM,GAC5CyD,EAAEjE,IAAI+B,OAAO,SAAAkC,GAAC,OAAIA,EAAExE,QAAOuC,QAAQ,SAAAV,GAAI,OAAIjB,KAAkB,GAAMiB,EAAK7B,MAAQ,KAChFwE,EAAEhE,OAAO8B,OAAO,SAAAkC,GAAC,OAAIA,EAAExE,QAAOuC,QAAQ,SAAAV,GAAI,OAAIjB,KAAkB,GAAMiB,EAAK7B,MAAQ,KACnFwE,EAAE/D,MAAM6B,OAAO,SAAAkC,GAAC,OAAIA,EAAExE,QAAOuC,QAAQ,SAAAV,GAAI,OAAIjB,KAAkB,GAAMiB,EAAK7B,MAAQ,KAClFwE,EAAE5D,MAAQA,IAiBlB,SAASmI,EAAarB,GAAO,IACjB1G,EAAc0G,EAAd1G,KAAMD,EAAQ2G,EAAR3G,IACV+H,EAAe,EA0BnB,MAxBA,CACI,CAACpB,EAAMvG,KAAK8J,OAAQ,SAACC,EAAQC,EAAOC,GAAhB,OAAgCA,EAAYF,EAASnK,EAAMoK,EAAQnK,GAAMP,MAAM6B,OAAO,SAACoD,EAAGC,GAAJ,OAAY1E,KAAK2E,MAAMD,EAAM3E,KAAUkK,EAASlK,MAC1J,CAAC0G,EAAMlG,QAAQyJ,OAAQ,SAACC,EAAQC,EAAOC,GAAhB,OAAgCA,EAAYF,EAASnK,EAAMoK,EAAQnK,GAAMP,MAAM6B,OAAO,SAACT,GAAD,OAAUA,EAAKhB,MAAQE,IAAQmK,EAASnK,MACrJ,CAAC2G,EAAMjG,OAAOwJ,OAAQ,SAACC,EAAQC,EAAOC,GAAhB,OAAgCA,EAAYF,EAASnK,EAAMoK,EAAQnK,GAAMT,IAAI+B,OAAO,SAACoD,EAAGC,GAAJ,OAAY1E,KAAK2E,MAAMD,EAAM3E,KAAUkK,EAASlK,MAC1J,CAAC0G,EAAMjG,OAAOH,IAAI,SAAAb,GAAK,OAAIA,EAAMa,IAAI,SAACkD,EAAG7C,EAAGyC,GAAP,OAAeA,EAAKnD,KAAK2E,MAAMjE,EAAIX,GAASW,EAAIX,EAAQA,OAASiK,OAAQ,SAACC,EAAQC,EAAOC,GAAhB,OAAgC1D,EAAMjG,OAAOyJ,GAAQC,GAAO3K,OAAO8B,OAAO,SAACT,EAAM8D,GAAP,OAAe1E,KAAK2E,MAAMD,EAAM3E,KAAUC,KAAK2E,MAAMsF,EAASlK,QACxPuB,QAAQ,SAAA+B,EAA4C+G,GAAc,IAAAvF,EAAA1F,OAAAwK,EAAA,EAAAxK,CAAAkE,EAAA,GAAxD8G,EAAwDtF,EAAA,GAA3CwF,EAA2CxF,EAAA,GAC1DyF,EAASC,EAASJ,EAAapK,GAAMM,IAAI,SAAA8D,GAAK,OAAIA,EAAM9C,OAAO,SAAAkC,GAAC,OAAKA,EAAExE,QAAOyL,OAAO,SAACC,EAAYlH,GAAb,OAAmBkH,EAAalH,EAAE5D,OAAO,KAC9H+K,EAAcH,EAASD,EAAQvK,GAErCmB,EAAMpB,GAAKO,IAAI,SAAAkJ,GAAC,OAAI,GAAKA,IAAGjI,QAAQ,SAAAkI,GAChCkB,EAAYpJ,QAAQ,SAACqJ,EAAOjK,GACxB,IAAMkK,EAAQD,EAAMtK,IAAI,SAAAV,GAAK,SAAO6J,EAAM7J,KAC1C,GAAoC,IAAhCiL,EAAMvJ,OAAO,SAAAf,GAAC,OAAIA,IAAGrB,OAAc,CACnC4D,QAAQ+G,IAAI,CAAElJ,IAAGmK,OAAQrB,EAAIzF,SAAS,GAAG9E,OAAQ2L,MAAOA,EAAM7G,WAAYqG,cAC1EvC,IACA,IAAMqC,EAAQU,EAAMjJ,SAAQ,GACtBmJ,EAA0BT,EAA2B3J,EAAGwJ,EAAOC,GACrEtH,QAAQ+G,IAAIkB,EAAwBzK,IAAI,SAAAC,GAAC,OAAIA,EAAEV,SAC/CkL,EAAwBxJ,QAAQ,SAAAV,GAAI,OAAIA,EAAKjB,MAAQiB,EAAKjB,OAAS6J,WAM5E3B,EAqCX,SAAS0C,EAASpH,EAAKb,GACnB,OAAOnD,OAAA0B,EAAA,EAAA1B,CAAIgB,MAAMgD,EAAIlE,OAASqD,GAAMgC,QAAQjE,IAAI,SAAAK,GAAC,OAAIyC,EAAI4H,MAAMrK,EAAI4B,GAAO5B,EAAI,GAAK4B,SCtSxE6D,6MAtDXK,MAAQ,CACJ1G,IAAKiB,EAAKqF,MAAMtG,6EAGX,IAAAkB,EAAA3B,KACCoH,EAAQ,IAAI5G,EAAMR,KAAKmH,MAAM1G,KAC7BC,EAAO0G,EAAM1G,KACnB,OACI4F,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UAAUC,QAAS,WACjC,IAAM+E,EAAS7L,OAAA8J,EAAA,EAAA9J,CAAA,GAAQ6B,EAAKwF,MAAb,CAAoBW,KAAM,aACzCnG,EAAKkG,SAAS8D,GACdhK,EAAKoF,MAAMZ,SAASwF,KAHxB,YAMArF,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UAAUC,QAAS,WACjC,IAAM+E,EAAS7L,OAAA8J,EAAA,EAAA9J,CAAA,GAAQ6B,EAAKwF,MAAb,CAAoBW,KAAM,WACzCnG,EAAKkG,SAAS8D,GACdhK,EAAKoF,MAAMZ,SAASwF,KAHxB,UAMArF,EAAAC,EAAAC,cAAA,UAAQG,UAAU,UAAUiF,aAAc,IAAKC,QAAS,SAACzJ,GACrDT,EAAKkG,SAAL/H,OAAA8J,EAAA,EAAA9J,CAAA,GAAmB6B,EAAKwF,MAAxB,CAA+B1G,IAAK+I,OAAOpH,EAAIgH,OAAO1J,YAGtD4G,EAAAC,EAAAC,cAAA,UAAQ9G,MAAM,KAAd,OACA4G,EAAAC,EAAAC,cAAA,UAAQ9G,MAAM,KAAd,OACA4G,EAAAC,EAAAC,cAAA,UAAQ9G,MAAM,MAAd,UAGJ4G,EAAAC,EAAAC,cAAA,WACK3E,EAAMnB,GAAMM,IAAI,SAAAK,GAAC,OAAIiF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACxC7E,EAAMnB,GAAMM,IAAI,SAAAM,GAAC,OAAIgF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAChC9E,EAAMnB,GAAMM,IAAI,SAAAiH,GAAC,OAAI3B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACxC7E,EAAMnB,GAAMM,IAAI,SAAAkH,GACb,IAAM3G,EAAO6F,EAAMjG,OAAOE,EAAIX,EAAOY,GAAG2G,EAAIvH,EAAOwH,GACnD,OAAO5B,EAAAC,EAAAC,cAAA,SACHmC,KAAK,OACLC,UAAU,IACVC,UAAU,EACVlC,UAAU,YACVjH,MAAO6B,EAAK7B,OAAS,yBA3ClCgL,aA0D3B,SAAS7I,EAAM+C,GACX,OAAO9E,OAAA0B,EAAA,EAAA1B,CAAIgB,MAAM8D,GAAGK,YCaT6B,6MAtEXK,MAAQ,CACJC,MAAO,IAAI5G,EAAMkB,EAAKqF,MAAMtG,8EAGvB,IAAAkB,EAAA3B,KACCoH,EAAQpH,KAAKmH,MAAMC,MACnB1G,EAAO0G,EAAM1G,KAEnBiD,OAAOyD,MAAQA,EAGf,IAAMU,EACFxB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGsF,QAAS9L,KAAKmH,MAAMY,OAAQ/H,KAAKmH,MAAMY,QAE9CzB,EAAAC,EAAAC,cAAA,WACK3E,EAAMnB,GAAMM,IAAI,SAAAK,GAAC,OAAIiF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACxC7E,EAAMnB,GAAMM,IAAI,SAAAM,GAAC,OAAIgF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAChC9E,EAAMnB,GAAMM,IAAI,SAAAiH,GAAC,OAAI3B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACxC7E,EAAMnB,GAAMM,IAAI,SAAAkH,GACb,IAAM3G,EAAO6F,EAAMjG,OAAOE,EAAIX,EAAOY,GAAG2G,EAAIvH,EAAOwH,GACnD,OAAO5B,EAAAC,EAAAC,cAAA,SACHmC,KAAK,OACLC,UAAU,IACVjC,UAAU,OACVF,MAAO,CAAEqC,gBAAiBvH,EAAKlB,OAAS,OAAS,GAAI0L,YAAaxK,EAAKlB,OAAS,OAAS,IACzFX,MAAO6B,EAAK7B,OAAS,GACrByG,SAAU,SAAA8C,GACN,IAAMrE,EAAI4E,OAAOP,EAAEG,OAAO1J,OAAS,GAC/BkF,GAAK,GAAKA,GAAKjD,EAAKoF,MAAMtG,MAC1Bc,EAAK7B,MAAQkF,EACbrD,EAAKlB,SAAWkB,EAAK7B,MACrBiC,EAAKkG,SAAS,CAAET,0BAUhDd,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,SACnBJ,EAAAC,EAAAC,cAAA,UAAQG,UAAU,oBAAoBC,QAAS,WACvCQ,EAAMpE,QACNrB,EAAKkG,SAAS,CAAET,UAEhBzF,EAAKkG,SAAS,CAAET,QAAOW,MAAO,wBAJtC,SAQAzB,EAAAC,EAAAC,cAAA,UAAQG,UAAU,qBAAqBC,QAAS,WAC5CjF,EAAKkG,SAAS,CACVT,MAAO,IAAI5G,EAAMmB,EAAKoF,MAAMtG,SAFpC,SAMA6F,EAAAC,EAAAC,cAAA,UAAQG,UAAU,kBAAkBC,QAAS,WACzCjF,EAAKoF,MAAMsB,WADf,UAQZ,cADOrI,KAAKmH,MAAMY,MACXD,SApEY4C,aA0E3B,SAAS7I,EAAM+C,GACX,OAAO9E,OAAA0B,EAAA,EAAA1B,CAAIgB,MAAM8D,GAAGK,QCjDT+G,iNAxBb7E,MAAQ,CACN1G,IAAK,EACLqH,KAAM,gFAGC,IAAAnG,EAAA3B,KACP,OACEsG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAQ1B,SAAiBQ,EAAOhB,GACtB,OAAOgB,EAAMW,MACX,IAAK,WAAY,OAAOxB,EAAAC,EAAAC,cAACyF,EAAD,CAAcxL,IAAK0G,EAAM1G,IAAK4H,OAAQ,kBAAMlC,EAASrG,OAAA8J,EAAA,EAAA9J,CAAA,GAAKqH,EAAN,CAAaW,KAAM,aAC/F,IAAK,OAAQ,OAAOxB,EAAAC,EAAAC,cAAC0F,EAAD,CAAazL,IAAK0G,EAAM1G,IAAK0F,SAAUA,IAC3D,IAAK,SAAU,OAAOG,EAAAC,EAAAC,cAAC2F,EAAD,CAAe1L,IAAK0G,EAAM1G,IAAK4H,OAAQ,kBAAMlC,EAASrG,OAAA8J,EAAA,EAAA9J,CAAA,GAAKqH,EAAN,CAAaW,KAAM,cAXvFsE,CAAQpM,KAAKmH,MAAO,SAAAA,GAAK,OAAIxF,EAAKkG,SAASV,cAVpCuD,aCME2B,QACW,cAA7B1I,OAAO2I,SAASC,UAEe,UAA7B5I,OAAO2I,SAASC,UAEhB5I,OAAO2I,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpG,EAAAC,EAAAC,cAACmG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b5e5c8d.chunk.js","sourcesContent":["class Cell {\n    constructor(value = 0) {\n        /** @type {Cell[]} */\n        this.row = [];\n        /** @type {Cell[]} */\n        this.column = [];\n        /** @type {Cell[]} */\n        this.block = [];\n        this.value = value;\n        this.options = [];\n        this.locked = false;\n        this.fiber = 0;\n        this.index = 0;\n    }\n}\n\nclass Board {\n    constructor(dim) {\n        this.dim = dim;\n        const sqrt = this.sqrt = dim ** 0.5;\n        /** @type {Array<Array<Cell>>} */\n        this.rows = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Array<Cell>>} */\n        this.columns = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Array<Cell>>} */\n        this.blocks = new Array(dim).fill().map(p => new Array(dim).fill(0));\n        /** @type {Array<Cell>} */\n        this.all = new Array(dim ** 2).fill(0);\n        for (let i = 0; i < dim; i++) {\n            for (let j = 0; j < dim; j++) {\n                const cell = new Cell();\n\n                this.rows[i][j] = cell;\n                cell.row = this.rows[i];\n\n                this.columns[j][i] = cell;\n                cell.column = this.columns[j];\n\n                this.blocks[i - i % sqrt + (j - j % sqrt) / sqrt][(i % sqrt) * sqrt + j % sqrt] = cell;\n                cell.block = this.blocks[i - i % sqrt + (j - j % sqrt) / sqrt];\n\n                this.all[i * dim + j] = cell;\n\n                cell.options = [...Array(dim)];\n                cell.index = i * dim + j;\n            }\n        }\n    }\n\n    backup() {\n        this.backupState = this.all.map(cell => cell.value);\n    }\n\n    rollback() {\n        this.all.map((cell, i) => cell.value = this.backupState[i]);\n    }\n\n    solve(priority = range(this.dim, 1), ignoreInput) {\n        this.backup();\n        if (!ignoreInput) {\n            this.all.filter(cell => !cell.locked).forEach(cell => cell.value = 0);\n        }\n\n        let i = -1, dir = 1;\n        /** @type {Cell} */\n        let cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(cell => cell.value === val)\n                    ||\n                    cell.row.some(cell => cell.value === val)\n                    ||\n                    cell.column.some(cell => cell.value === val)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        if (i === -1) {\n            this.rollback();\n        }\n        return i > -1;\n    }\n\n    isSolvable(priority = range(this.dim, 1)) {\n        this.backup();\n\n        let i = -1, dir = 1;\n        let foundSolution = false;\n\n        /** @type {Cell} */\n        let cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(cell => cell.value === val)\n                    ||\n                    cell.row.some(cell => cell.value === val)\n                    ||\n                    cell.column.some(cell => cell.value === val)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        if (i === -1) {\n            this.rollback();\n            return false;\n        }\n\n        dir = -1;\n        foundSolution = true;\n\n        cell = {};\n        while (cell) {\n            i += dir;\n            cell = this.all[i];\n\n            if (!cell || cell.locked) continue;\n\n            let val = cell.value;\n            let priorityIdx = priority.indexOf(val);\n            do {\n                priorityIdx++;\n                val = priority[priorityIdx];\n            }\n            while (\n                priorityIdx < priority.length\n                &&\n                (\n                    cell.block.some(cell => cell.value === val)\n                    ||\n                    cell.row.some(cell => cell.value === val)\n                    ||\n                    cell.column.some(cell => cell.value === val)\n                )\n            );\n            if (priorityIdx < priority.length) {\n                cell.value = val;\n                dir = 1;\n            } else {\n                cell.value = 0;\n                dir = -1;\n            }\n        }\n\n        this.rollback();\n        return i === -1 && foundSolution;\n    }\n\n    shuffle_test(difficulty = 5) {\n        const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n\n        this.all.forEach(cell => { cell.locked = false; cell.value = 0; });\n        const solvePriority = shuffleArray(range(this.dim, 1));\n        this.solve(solvePriority, true);\n\n        const size = this.dim ** 2;\n        const shuffledIndexes = shuffleArray(range(size));\n        this.all.forEach(cell => cell.locked = true);\n\n        let i;\n        const valsRemoved = [];\n        for (i = size - 1; i >= visibleCells; i--) {\n            const cell = this.all[shuffledIndexes[i]];\n            valsRemoved.push(cell.value);\n            cell.locked = false;\n            cell.value = 0;\n        }\n        i++;\n        let counter = 0;\n        while (!this.isSolvable(solvePriority)) {\n            this.all[shuffledIndexes[i]].value = valsRemoved.pop();\n            counter++;\n        }\n\n        if (counter > 0) {\n            console.warn(`Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${visibleCells - counter} visible cells`);\n            window.currVisible = visibleCells - counter;\n        }\n    }\n\n    shuffleHard() {\n        do {\n            this.shuffle();\n\n            let arr;\n            do {\n                arr = this.getHints();\n                arr.forEach(({ cell, value }) => cell.value = value);\n            } while (arr.length > 0);\n\n        } while (this.all.every(c => c.value > 0));\n\n        // TESTING EASIER WHEN COMMENTED OUT\n        this.all.filter(c => !c.locked).forEach(c => c.value = 0); \n    }\n\n    shuffle(difficulty = 5) {\n        const visibleCells = getVisibleCellsByDifficulty(difficulty, this.dim);\n\n        this.all.forEach(cell => { cell.locked = false; cell.value = 0; });\n        const priority = shuffleArray(range(this.dim, 1));\n        // FOR TESTING\n        window.priority = priority;\n        // \n        this.solve(priority, true);\n        this.all.forEach(cell => cell.locked = true);\n\n        const size = this.dim ** 2;\n        const shuffledIndexes = shuffleArray(range(size));\n        let currVisible = size;\n        let i = 0;\n        let lastValue, cell, isSolvable;\n        do {\n\n            do {\n                cell = this.all[shuffledIndexes[i]];\n                lastValue = cell.value;\n                cell.value = 0;\n                cell.locked = false;\n                i++;\n                currVisible--;\n                isSolvable = this.isSolvable(priority);\n            } while (isSolvable && currVisible > visibleCells && i < size);\n\n            if (!isSolvable) {\n                currVisible++;\n                cell.value = lastValue;\n                cell.locked = true;\n            }\n        } while (currVisible > visibleCells && i < size);\n\n        if (currVisible > visibleCells) {\n            console.warn(`Shuffle could not stand up to expectations: expected ${visibleCells} visibleCells, got down to ${currVisible} visible cells`);\n            window.currVisible = currVisible;\n        }\n    }\n\n\n    setFibers() {\n        this.all.filter(c => !c.value).forEach(c => {\n            let fiber = parseInt('1'.repeat(this.dim), 2);\n            c.row.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n            c.column.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n            c.block.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n            c.fiber = fiber;\n        })\n    }\n\n    getHints() {\n        this.setFibers();\n\n        const hints = this.all\n            .filter(c => !c.value && !(c.fiber & (c.fiber - 1)))\n            .map(c => ({ cell: c, value: c.fiber.toString(2).length }));\n\n        for (let n = 1; n <= this.dim; n++) {\n            [\n                this.rows,\n                this.columns,\n                this.blocks\n            ].forEach(ordersArr => {\n                ordersArr.forEach(order => {\n                    const candidates = order.filter(c => !c.value && (c.fiber & (1 << (n - 1))));\n                    if (candidates.length === 1) {\n                        hints.push({\n                            cell: candidates[0],\n                            value: n\n                        });\n                    }\n                });\n            });\n        }\n\n        return hints;\n    }\n\n    getHints_indexes() {\n        const hints = [...this.all.keys()]\n            .filter(i => !this.all[i].value && !(this.all[i].fiber & (this.all[i].fiber - 1)))\n            .map(i => ({ index: i, value: this.all[i].fiber.toString(2).length }));\n\n        for (let n = 1; n <= this.dim; n++) {\n            [\n                this.rows,\n                this.columns,\n                this.blocks\n            ].forEach(ordersArr => {\n                ordersArr.forEach(order => {\n                    const candidates = order.filter(c => !c.value && (c.fiber & (1 << (n - 1))));\n                    if (candidates.length === 1) {\n                        hints.push({\n                            index: this.all.indexOf(candidates[0]),\n                            value: n\n                        });\n                    }\n                });\n            });\n        }\n\n        return hints;\n    }\n}\n\nfunction range(n, start = 0) {\n    return Array(n).fill().map((_, i) => i + start);\n}\n\nfunction shuffleArray(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        const idx = Math.floor(Math.random() * arr.length - i) + i;\n        [arr[i], arr[idx]] = [arr[idx], arr[i]];\n    }\n    return arr;\n}\n\nconst difficultyMap = {\n    4: {\n        1: 8,\n        2: 7,\n        3: 6,\n        4: 5,\n        5: 4\n    },\n    9: {\n        1: 40,\n        2: 35,\n        3: 30,\n        4: 25,\n        5: 22\n    },\n    16: {\n        1: 180,\n        2: 160,\n        3: 140,\n        4: 120,\n        5: 103\n    }\n}\nfunction getVisibleCellsByDifficulty(difficulty, dim) {\n    return difficultyMap[dim][difficulty];\n}\n\nBoard.Cell = Cell;\n\nexport default Board;","import React, { Component } from 'react';\nimport '../App.css';\n\nimport Board from './board';\n\nclass ChoiceDialog {\n    constructor(onChange) {\n        this.onChange = onChange;\n        this.visible = false;\n        this.element = null;\n        this.cell = null;\n    }\n\n    /** @param {Board.Cell} cell */\n    show(cell) {\n        this.visible = true;\n        this.cell = cell;\n        this.element = <div style={{ display: 'flex' }}>\n            {Array(cell.row.length).fill().map((_, i) => i).map(i => {\n                return <button \n                className={\"Options-Dialog-Button\" + (cell.options[i] ? '' : ' Options-Dialog-Button-Pressed')} \n                onClick={() => {\n                    cell.options[i] = !cell.options[i];\n                    this.show(cell);\n                    this.onChange();\n                }}>{i + 1}</button>;\n            })}\n        </div>;\n\n        this.onChange();\n    }\n\n    hide() {\n        this.visible = false;\n        this.onChange();\n    }\n}\n\nexport default ChoiceDialog;","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport ChoiceDialog from '../lib/ChoiceDialog';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        board: (() => {\n            const b = new Board(this.props.dim);\n            b.shuffleHard();\n            // b.shuffle();\n            b.all.forEach(c => {\n                c.state = { highlightedCell: false, highlightedNumber: false };\n            });\n\n            return b;\n        })(),\n        optionsMode: false\n    }\n\n    /** @param {{ dim: number }} props */\n    constructor(props) {\n        super(props);\n        this.isEnded = false;\n        this.fullCounter = this.state.board.all.filter(cell => cell.value).length;\n\n        this.choiceDialog = new ChoiceDialog(() => this.setState(this.state));\n    }\n\n    render() {\n        const board = this.state.board;\n        const sqrt = board.sqrt;\n        /// for testing:\n        window.board = board;\n        ///\n\n        const page = (\n\n            <div className=\"App-header\">\n                <div>\n                    <p style={this.state.error ? {} : { color: '#282c34' }}>{this.state.error || 'something'}</p>\n                </div>\n\n                {this.state.optionsMode && this.choiceDialog.visible ?\n                    <div>\n                        {this.choiceDialog.element}\n                    </div>\n                    :\n                    null\n                }\n\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\">\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    if (!cell.value && this.state.optionsMode) {\n                                        return this.getOptionsCell(cell);\n                                    } else {\n                                        return this.getNumberCell(cell);\n                                    }\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-green\" onClick={() => {\n                        if (board.solve()) {\n                            this.setState(this.state);\n                        } else {\n                            this.state.error = 'Cannot be solved!';\n                            this.setState(this.state);\n                        }\n                    }}>Solve</button>\n\n                    <button className=\"Buttons btn-blue\" onClick={() => {\n                        this.state.optionsMode = !this.state.optionsMode;\n                        this.setState(this.state);\n                    }}>Toggle Options</button>\n\n                    <button className=\"Buttons btn-yellow\" onClick={() => {\n                        board.all.filter(c => !c.locked).forEach(c => c.value = 0);\n                        board.all.forEach(c => {\n                            c.state = { highlightedCell: false, highlightedNumber: false };\n                        });\n                        this.setState(this.state);\n                    }}>Reset</button>\n\n                    <button className=\"Buttons btn-red\" onClick={() => {\n                        this.props.onExit();\n                    }}>Exit</button>\n                </div>\n\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-blue\" onClick={() => {\n                        this.showHint();\n                    }}>Hint</button>\n\n                    <button className=\"Buttons btn-blue\" onClick={() => {\n                        setFibersStrong(board);\n\n                        board.all.filter(c => c.value === 0).forEach(c => {\n                            c.options = c.options.map((_, i) => !!(c.fiber & (1 << i)));\n                        });\n\n                        this.setState(this.state);\n                    }}>Find All Options</button>\n                </div>\n            </div>\n        );\n\n        delete this.state.error;\n        return page;\n    }\n\n    getNumberCell(cell) {\n        const board = this.state.board;\n\n        return <div className=\"Cell\">\n            <input\n                type=\"text\"\n                maxLength=\"2\"\n                readOnly={this.isEnded || cell.locked}\n                className=\"Cell\"\n                style={{\n                    backgroundColor: cell.locked ? '#A7A7B4' : (cell.state.highlightedCell ? 'rgba(255,255,255,0.8)' : ''),\n                    color: cell.state.highlightedNumber ? 'blue' : '',\n                    fontWeight: cell.state.highlightedNumber ? 'bolder' : 'bold',\n                }}\n                value={cell.value || ''}\n                onFocus={(e) => {\n                    highlightLines(cell);\n                    highlightNumber(cell, board);\n                    this.setState(this.state);\n                    if (!cell.locked) {\n                        e.target.setSelectionRange(0, e.target.value.length);\n                    }\n                }}\n                onBlur={() => {\n                    unhighlightLines(cell);\n                    highlightNumber(cell, board);\n                    this.setState(this.state);\n                }}\n                onChange={e => {\n                    const n = Number(e.target.value || 0);\n                    this.changeValueOnBoard(n, cell, board);\n                }} />\n        </div>;\n    }\n\n    changeValueOnBoard(n, cell, board) {\n        if (n >= 0 && n <= this.props.dim) {\n            if (!!cell.value !== !!n) {\n                this.fullCounter += !!n ? 1 : -1;\n                if (this.fullCounter === board.dim ** 2) {\n                    if (isSolved(board)) {\n                        this.setState({ ...this.state, error: 'You Won!' });\n                        this.isEnded = true;\n                    }\n                    else {\n                        this.setState({ ...this.state, error: 'Wrong!' });\n                        this.isEnded = true;\n                    }\n                }\n            }\n            cell.value = n;\n            this.setState(this.state);\n        }\n        highlightNumber(cell, board);\n    }\n\n    /** @param {Board.Cell} cell */\n    getOptionsCell(cell) {\n        const board = this.state.board;\n\n        return <div className=\"Cell\">\n            <div\n                className=\"Cell options-container\"\n                style={this.choiceDialog.cell === cell ? { color: 'blue', backgroundColor: 'beige' } : {}}\n                onClick={(e) => {\n                    this.choiceDialog.show(cell);\n                    this.setState(this.state);\n                }}\n                onBlur={() => {\n                    this.setState(this.state);\n                }}\n            >\n                {cell.options.map((marked, i) =>\n                    <div\n                        className=\"options-cell\"\n                        style={{\n                            fontSize: '9px',\n                            width: '10px',\n                            height: '10px'\n                        }}>{marked ? i + 1 : ' '}</div>\n                )}\n            </div>\n        </div>\n    }\n\n    showHint() {\n        setFibers(this.state.board);\n        const hints = getHints(this.state.board);\n        console.log(hints);\n        const [hint] = hints;\n        if (hint) {\n            const board = this.state.board;\n            const cell = board.all[hint.index];\n            highlightLines(cell);\n            this.state.error = hint.reason;\n            this.changeValueOnBoard(hint.value, cell, board);\n            setTimeout(() => {\n                unhighlightLines(cell);\n            });\n        }\n\n        return hint;\n    }\n}\n\nexport default BoardElement;\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightNumber(cell, board) {\n    board.all.forEach(c => {\n        c.state.highlightedNumber = (cell.value === c.value);\n    });\n}\n\n/** @param {Board.Cell} cell */\n/** @param {Board} board */\nfunction highlightLines(cell) {\n    cell.row.forEach(p => p.state.highlightedCell = true);\n    cell.column.forEach(p => p.state.highlightedCell = true);\n}\n\n/** @param {Board.Cell} cell */\nfunction unhighlightLines(cell) {\n    cell.row.forEach(p => p.state.highlightedCell = false);\n    cell.column.forEach(p => p.state.highlightedCell = false);\n}\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}\n\n\n/** @param {Board} board */\nfunction isSolved(board) {\n    return (\n        board.rows.every(row => new Set(row.map(cell => cell.value)).size === board.dim)\n        &&\n        board.columns.every(column => new Set(column.map(cell => cell.value)).size === board.dim)\n        &&\n        board.blocks.every(block => new Set(block.map(cell => cell.value)).size === board.dim)\n    );\n}\n\n/** @param {Board} board */\nfunction setFibers(board) {\n    board.all.filter(c => !c.value).forEach(c => {\n        let fiber = parseInt('1'.repeat(board.dim), 2);\n        c.row.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.column.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.block.filter(c => c.value).forEach(cell => fiber = fiber & ~(1 << (cell.value - 1)));\n        c.fiber = fiber;\n    })\n}\n\n/** @param {Board} board */\nfunction setFibersStrong(board) {\n    setFibers(board);\n\n    let marksCounter = 0, lastMarksCounter;\n\n    while (marksCounter !== lastMarksCounter) {\n        lastMarksCounter = marksCounter;\n        marksCounter = reduceFibers(board);\n    }\n}\n\n/** @param {Board} board */\nfunction reduceFibers(board) {\n    const { sqrt, dim } = board;\n    let marksCounter = 0;\n\n    [\n        [board.rows.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].block.filter((_, idx) => Math.floor(idx / sqrt) !== groupI % sqrt)],\n        [board.columns.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].block.filter((cell) => cell.index % dim !== groupI % dim)],\n        [board.blocks.flat(), (groupI, where, sourceGroup) => sourceGroup[groupI * dim + where * sqrt].row.filter((_, idx) => Math.floor(idx / sqrt) !== groupI % sqrt)],\n        [board.blocks.map(block => block.map((c, i, arr) => arr[ Math.floor(i / sqrt) + (i % sqrt) * sqrt ])).flat(), (groupI, where, sourceGroup) => board.blocks[groupI][where].column.filter((cell, idx) => Math.floor(idx / sqrt) !== Math.floor(groupI / sqrt))]\n    ].forEach(([sourceGroup, getCellsToRemoveOptionFrom], sourceIdx) => {\n        const fibers = toChunks(sourceGroup, sqrt).map(order => order.filter(c => !c.value).reduce((totalFiber, c) => totalFiber | c.fiber, 0));\n        const fiberGroups = toChunks(fibers, sqrt);\n\n        range(dim).map(o => 1 << o).forEach(bit => {\n            fiberGroups.forEach((group, i) => {\n                const marks = group.map(fiber => !!(bit & fiber));\n                if (marks.filter(p => p).length === 1) {\n                    console.log({ i, option: bit.toString(2).length, marks: marks.toString(), sourceIdx });\n                    marksCounter++;\n                    const where = marks.indexOf(true);\n                    const cellsToRemoveOptionFrom = getCellsToRemoveOptionFrom(i, where, sourceGroup);\n                    console.log(cellsToRemoveOptionFrom.map(p => p.index));\n                    cellsToRemoveOptionFrom.forEach(cell => cell.fiber = cell.fiber & ~bit);\n                }\n            });\n        });\n    })\n\n    return marksCounter;\n}\n\n/** @param {Board} board */\nfunction getHints(board) {\n    const hints = [...board.all.keys()]\n        .filter(i => !board.all[i].value && !(board.all[i].fiber & (board.all[i].fiber - 1)))\n        .map(i => ({\n            index: i,\n            value: board.all[i].fiber.toString(2).length,\n            reason: 'The only available option for this cell'\n        }));\n    range(board.dim).forEach(o => {\n        const value = o + 1;\n        const bit = 1 << o;\n        [\n            [board.rows, `only candidate for ${value} in row`],\n            [board.columns, `only candidate for ${value} in column`],\n            [board.blocks, `only candidate for ${value} in block`]\n        ].forEach(([ordersArr, reason]) => {\n            ordersArr.forEach(order => {\n                const candidates = order.filter(c => !c.value && (c.fiber & bit));\n                if (candidates.length === 1) {\n                    hints.push({\n                        index: board.all.indexOf(candidates[0]),\n                        value,\n                        reason\n                    });\n                }\n            });\n        });\n    });\n\n    return hints;\n}\n\n/** @type {<T>(arr: T[], size: number) => T[][]} */\nfunction toChunks(arr, size) {\n    return [...Array(arr.length / size).keys()].map(i => arr.slice(i * size, (i + 1) * size));\n}\n\n","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        dim: this.props.dim\n    }\n\n    render() {\n        const board = new Board(this.state.dim);\n        const sqrt = board.sqrt;\n        return (\n            <div className=\"App-header\" >\n                <button className=\"Buttons\" onClick={() => {\n                    const nextState = { ...this.state, page: 'new game' };\n                    this.setState(nextState);\n                    this.props.onChange(nextState);\n                }}>New Game</button>\n\n                <button className=\"Buttons\" onClick={() => {\n                    const nextState = { ...this.state, page: 'solver' };\n                    this.setState(nextState);\n                    this.props.onChange(nextState);\n                }}>Solver</button>\n\n                <select className=\"Buttons\" defaultValue={\"9\"} onInput={(val) => {\n                    this.setState({ ...this.state, dim: Number(val.target.value) });\n                    // this.props.onChange(this.state);\n                }}>\n                    <option value=\"4\">4x4</option>\n                    <option value=\"9\">9x9</option>\n                    <option value=\"16\">16x16</option>\n                </select>\n\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\">\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    return <input\n                                        type=\"text\"\n                                        maxLength=\"2\"\n                                        readOnly={true}\n                                        className=\"Cell-Mini\"\n                                        value={cell.value || ''}\n                                    />\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}","\nimport React, { Component } from 'react';\nimport Board from '../lib/board';\nimport '../App.css';\n\nclass BoardElement extends Component {\n\n    state = {\n        board: new Board(this.props.dim)\n    }\n\n    render() {\n        const board = this.state.board;\n        const sqrt = board.sqrt;\n        /// for testing:\n        window.board = board;\n        ///\n\n        const page = (\n            <div className=\"App-header\">\n                <div>\n                    <p hidden={!this.state.error}>{this.state.error}</p>\n                </div>\n                <div>\n                    {range(sqrt).map(i => <div style={{ display: 'flex' }}>\n                        {range(sqrt).map(j => <div className=\"Board-Block\" >\n                            {range(sqrt).map(k => <div style={{ display: 'flex' }}>\n                                {range(sqrt).map(l => {\n                                    const cell = board.blocks[i * sqrt + j][k * sqrt + l];\n                                    return <input\n                                        type=\"text\"\n                                        maxLength=\"2\"\n                                        className=\"Cell\"\n                                        style={{ backgroundColor: cell.locked ? 'gray' : '', borderColor: cell.locked ? 'gray' : '' }}\n                                        value={cell.value || ''}\n                                        onChange={e => {\n                                            const n = Number(e.target.value || 0);\n                                            if (n >= 0 && n <= this.props.dim) {\n                                                cell.value = n;\n                                                cell.locked = !!cell.value;\n                                                this.setState({ board });\n                                            }\n                                        }}\n                                    />\n                                })}\n                            </div>)}\n                        </div>)}\n                    </div>\n                    )}\n                </div>\n                <div style={{ display: 'flex' }}>\n                    <button className=\"Buttons btn-green\" onClick={() => {\n                        if (board.solve()) {\n                            this.setState({ board });\n                        } else {\n                            this.setState({ board, error: 'Cannot be solved!' });\n                        }\n                    }}>Solve</button>\n\n                    <button className=\"Buttons btn-yellow\" onClick={() => {\n                        this.setState({\n                            board: new Board(this.props.dim)\n                        });\n                    }}>Reset</button>\n\n                    <button className=\"Buttons btn-red\" onClick={() => {\n                        this.props.onExit();\n                    }}>Exit</button>\n                </div>\n            </div>\n        );\n\n        delete this.state.error;\n        return page;\n    }\n}\n\nexport default BoardElement;\n\nfunction range(n) {\n    return [...Array(n).keys()];\n}","import React, { Component } from 'react';\nimport './App.css';\nimport BoardElement from './components/BoardElement';\nimport MenuElement from './components/MenuElement';\nimport SolverElement from './components/SolverElement';\n\nclass App extends Component {\n  state = {\n    dim: 9,\n    page: 'menu'\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {getPage(this.state, state => this.setState(state))}\n        </header>\n      </div>\n    )\n  }\n}\n\nfunction getPage(state, onChange) {\n  switch(state.page) {\n    case 'new game': return <BoardElement dim={state.dim} onExit={() => onChange({ ...state, page: 'menu' })}></BoardElement>\n    case 'menu': return <MenuElement dim={state.dim} onChange={onChange}></MenuElement>\n    case 'solver': return <SolverElement dim={state.dim} onExit={() => onChange({ ...state, page: 'menu' })}></SolverElement>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}